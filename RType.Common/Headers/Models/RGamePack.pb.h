// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RGamePack.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_RGamePack_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_RGamePack_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_RGamePack_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_RGamePack_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RGamePack_2eproto;
namespace RType {
class ActionPacket;
class ActionPacketDefaultTypeInternal;
extern ActionPacketDefaultTypeInternal _ActionPacket_default_instance_;
class CollidePacket;
class CollidePacketDefaultTypeInternal;
extern CollidePacketDefaultTypeInternal _CollidePacket_default_instance_;
class DestroyPacket;
class DestroyPacketDefaultTypeInternal;
extern DestroyPacketDefaultTypeInternal _DestroyPacket_default_instance_;
class EffectPacket;
class EffectPacketDefaultTypeInternal;
extern EffectPacketDefaultTypeInternal _EffectPacket_default_instance_;
class LoadPacket;
class LoadPacketDefaultTypeInternal;
extern LoadPacketDefaultTypeInternal _LoadPacket_default_instance_;
class PositionPacket;
class PositionPacketDefaultTypeInternal;
extern PositionPacketDefaultTypeInternal _PositionPacket_default_instance_;
class RGamePack;
class RGamePackDefaultTypeInternal;
extern RGamePackDefaultTypeInternal _RGamePack_default_instance_;
class Vector2;
class Vector2DefaultTypeInternal;
extern Vector2DefaultTypeInternal _Vector2_default_instance_;
}  // namespace RType
PROTOBUF_NAMESPACE_OPEN
template<> ::RType::ActionPacket* Arena::CreateMaybeMessage<::RType::ActionPacket>(Arena*);
template<> ::RType::CollidePacket* Arena::CreateMaybeMessage<::RType::CollidePacket>(Arena*);
template<> ::RType::DestroyPacket* Arena::CreateMaybeMessage<::RType::DestroyPacket>(Arena*);
template<> ::RType::EffectPacket* Arena::CreateMaybeMessage<::RType::EffectPacket>(Arena*);
template<> ::RType::LoadPacket* Arena::CreateMaybeMessage<::RType::LoadPacket>(Arena*);
template<> ::RType::PositionPacket* Arena::CreateMaybeMessage<::RType::PositionPacket>(Arena*);
template<> ::RType::RGamePack* Arena::CreateMaybeMessage<::RType::RGamePack>(Arena*);
template<> ::RType::Vector2* Arena::CreateMaybeMessage<::RType::Vector2>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace RType {

enum RGamePack_PackType : int {
  RGamePack_PackType_PING = 0,
  RGamePack_PackType_ACTION = 1,
  RGamePack_PackType_COLLISION = 2,
  RGamePack_PackType_LOAD = 40,
  RGamePack_PackType_DESTROY = 41,
  RGamePack_PackType_POSITION = 42,
  RGamePack_PackType_EFFECT = 43,
  RGamePack_PackType_END_GAME = 44,
  RGamePack_PackType_RGamePack_PackType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RGamePack_PackType_RGamePack_PackType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RGamePack_PackType_IsValid(int value);
constexpr RGamePack_PackType RGamePack_PackType_PackType_MIN = RGamePack_PackType_PING;
constexpr RGamePack_PackType RGamePack_PackType_PackType_MAX = RGamePack_PackType_END_GAME;
constexpr int RGamePack_PackType_PackType_ARRAYSIZE = RGamePack_PackType_PackType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RGamePack_PackType_descriptor();
template<typename T>
inline const std::string& RGamePack_PackType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RGamePack_PackType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RGamePack_PackType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RGamePack_PackType_descriptor(), enum_t_value);
}
inline bool RGamePack_PackType_Parse(
    const std::string& name, RGamePack_PackType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RGamePack_PackType>(
    RGamePack_PackType_descriptor(), name, value);
}
enum ActionPacket_ActionType : int {
  ActionPacket_ActionType_UP = 0,
  ActionPacket_ActionType_DOWN = 1,
  ActionPacket_ActionType_LEFT = 2,
  ActionPacket_ActionType_RIGHT = 3,
  ActionPacket_ActionType_SHOOT = 4,
  ActionPacket_ActionType_ActionPacket_ActionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ActionPacket_ActionType_ActionPacket_ActionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ActionPacket_ActionType_IsValid(int value);
constexpr ActionPacket_ActionType ActionPacket_ActionType_ActionType_MIN = ActionPacket_ActionType_UP;
constexpr ActionPacket_ActionType ActionPacket_ActionType_ActionType_MAX = ActionPacket_ActionType_SHOOT;
constexpr int ActionPacket_ActionType_ActionType_ARRAYSIZE = ActionPacket_ActionType_ActionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActionPacket_ActionType_descriptor();
template<typename T>
inline const std::string& ActionPacket_ActionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ActionPacket_ActionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ActionPacket_ActionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ActionPacket_ActionType_descriptor(), enum_t_value);
}
inline bool ActionPacket_ActionType_Parse(
    const std::string& name, ActionPacket_ActionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ActionPacket_ActionType>(
    ActionPacket_ActionType_descriptor(), name, value);
}
enum LoadPacket_EntityType : int {
  LoadPacket_EntityType_PLAYER = 0,
  LoadPacket_EntityType_ENEMY = 1,
  LoadPacket_EntityType_ALLY = 2,
  LoadPacket_EntityType_POWERUP = 3,
  LoadPacket_EntityType_BASIC_SHOT = 4,
  LoadPacket_EntityType_ENEMY_BULLET = 5,
  LoadPacket_EntityType_LoadPacket_EntityType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LoadPacket_EntityType_LoadPacket_EntityType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LoadPacket_EntityType_IsValid(int value);
constexpr LoadPacket_EntityType LoadPacket_EntityType_EntityType_MIN = LoadPacket_EntityType_PLAYER;
constexpr LoadPacket_EntityType LoadPacket_EntityType_EntityType_MAX = LoadPacket_EntityType_ENEMY_BULLET;
constexpr int LoadPacket_EntityType_EntityType_ARRAYSIZE = LoadPacket_EntityType_EntityType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoadPacket_EntityType_descriptor();
template<typename T>
inline const std::string& LoadPacket_EntityType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LoadPacket_EntityType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LoadPacket_EntityType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LoadPacket_EntityType_descriptor(), enum_t_value);
}
inline bool LoadPacket_EntityType_Parse(
    const std::string& name, LoadPacket_EntityType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LoadPacket_EntityType>(
    LoadPacket_EntityType_descriptor(), name, value);
}
enum EffectPacket_EffectType : int {
  EffectPacket_EffectType_SPEED = 0,
  EffectPacket_EffectType_ATTACKSPEED = 1,
  EffectPacket_EffectType_SHIELD = 2,
  EffectPacket_EffectType_LIFE = 3,
  EffectPacket_EffectType_EffectPacket_EffectType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EffectPacket_EffectType_EffectPacket_EffectType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EffectPacket_EffectType_IsValid(int value);
constexpr EffectPacket_EffectType EffectPacket_EffectType_EffectType_MIN = EffectPacket_EffectType_SPEED;
constexpr EffectPacket_EffectType EffectPacket_EffectType_EffectType_MAX = EffectPacket_EffectType_LIFE;
constexpr int EffectPacket_EffectType_EffectType_ARRAYSIZE = EffectPacket_EffectType_EffectType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EffectPacket_EffectType_descriptor();
template<typename T>
inline const std::string& EffectPacket_EffectType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EffectPacket_EffectType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EffectPacket_EffectType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EffectPacket_EffectType_descriptor(), enum_t_value);
}
inline bool EffectPacket_EffectType_Parse(
    const std::string& name, EffectPacket_EffectType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EffectPacket_EffectType>(
    EffectPacket_EffectType_descriptor(), name, value);
}
// ===================================================================

class RGamePack :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RType.RGamePack) */ {
 public:
  RGamePack();
  virtual ~RGamePack();

  RGamePack(const RGamePack& from);
  RGamePack(RGamePack&& from) noexcept
    : RGamePack() {
    *this = ::std::move(from);
  }

  inline RGamePack& operator=(const RGamePack& from) {
    CopyFrom(from);
    return *this;
  }
  inline RGamePack& operator=(RGamePack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RGamePack& default_instance();

  enum UvarCase {
    kActionContent = 3,
    kCollidePacket = 4,
    kLoadContent = 5,
    kDestroyContent = 6,
    kPositionContent = 7,
    kEffectContent = 8,
    UVAR_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RGamePack* internal_default_instance() {
    return reinterpret_cast<const RGamePack*>(
               &_RGamePack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RGamePack& a, RGamePack& b) {
    a.Swap(&b);
  }
  inline void Swap(RGamePack* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RGamePack* New() const final {
    return CreateMaybeMessage<RGamePack>(nullptr);
  }

  RGamePack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RGamePack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RGamePack& from);
  void MergeFrom(const RGamePack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RGamePack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RType.RGamePack";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RGamePack_2eproto);
    return ::descriptor_table_RGamePack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RGamePack_PackType PackType;
  static constexpr PackType PING =
    RGamePack_PackType_PING;
  static constexpr PackType ACTION =
    RGamePack_PackType_ACTION;
  static constexpr PackType COLLISION =
    RGamePack_PackType_COLLISION;
  static constexpr PackType LOAD =
    RGamePack_PackType_LOAD;
  static constexpr PackType DESTROY =
    RGamePack_PackType_DESTROY;
  static constexpr PackType POSITION =
    RGamePack_PackType_POSITION;
  static constexpr PackType EFFECT =
    RGamePack_PackType_EFFECT;
  static constexpr PackType END_GAME =
    RGamePack_PackType_END_GAME;
  static inline bool PackType_IsValid(int value) {
    return RGamePack_PackType_IsValid(value);
  }
  static constexpr PackType PackType_MIN =
    RGamePack_PackType_PackType_MIN;
  static constexpr PackType PackType_MAX =
    RGamePack_PackType_PackType_MAX;
  static constexpr int PackType_ARRAYSIZE =
    RGamePack_PackType_PackType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PackType_descriptor() {
    return RGamePack_PackType_descriptor();
  }
  template<typename T>
  static inline const std::string& PackType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PackType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PackType_Name.");
    return RGamePack_PackType_Name(enum_t_value);
  }
  static inline bool PackType_Parse(const std::string& name,
      PackType* value) {
    return RGamePack_PackType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kPlayerIdFieldNumber = 2,
    kActionContentFieldNumber = 3,
    kCollidePacketFieldNumber = 4,
    kLoadContentFieldNumber = 5,
    kDestroyContentFieldNumber = 6,
    kPositionContentFieldNumber = 7,
    kEffectContentFieldNumber = 8,
  };
  // .RType.RGamePack.PackType code = 1;
  void clear_code();
  ::RType::RGamePack_PackType code() const;
  void set_code(::RType::RGamePack_PackType value);
  private:
  ::RType::RGamePack_PackType _internal_code() const;
  void _internal_set_code(::RType::RGamePack_PackType value);
  public:

  // uint32 playerId = 2;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::uint32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .RType.ActionPacket actionContent = 3;
  bool has_actioncontent() const;
  private:
  bool _internal_has_actioncontent() const;
  public:
  void clear_actioncontent();
  const ::RType::ActionPacket& actioncontent() const;
  ::RType::ActionPacket* release_actioncontent();
  ::RType::ActionPacket* mutable_actioncontent();
  void set_allocated_actioncontent(::RType::ActionPacket* actioncontent);
  private:
  const ::RType::ActionPacket& _internal_actioncontent() const;
  ::RType::ActionPacket* _internal_mutable_actioncontent();
  public:

  // .RType.CollidePacket collidePacket = 4;
  bool has_collidepacket() const;
  private:
  bool _internal_has_collidepacket() const;
  public:
  void clear_collidepacket();
  const ::RType::CollidePacket& collidepacket() const;
  ::RType::CollidePacket* release_collidepacket();
  ::RType::CollidePacket* mutable_collidepacket();
  void set_allocated_collidepacket(::RType::CollidePacket* collidepacket);
  private:
  const ::RType::CollidePacket& _internal_collidepacket() const;
  ::RType::CollidePacket* _internal_mutable_collidepacket();
  public:

  // .RType.LoadPacket loadContent = 5;
  bool has_loadcontent() const;
  private:
  bool _internal_has_loadcontent() const;
  public:
  void clear_loadcontent();
  const ::RType::LoadPacket& loadcontent() const;
  ::RType::LoadPacket* release_loadcontent();
  ::RType::LoadPacket* mutable_loadcontent();
  void set_allocated_loadcontent(::RType::LoadPacket* loadcontent);
  private:
  const ::RType::LoadPacket& _internal_loadcontent() const;
  ::RType::LoadPacket* _internal_mutable_loadcontent();
  public:

  // .RType.DestroyPacket destroyContent = 6;
  bool has_destroycontent() const;
  private:
  bool _internal_has_destroycontent() const;
  public:
  void clear_destroycontent();
  const ::RType::DestroyPacket& destroycontent() const;
  ::RType::DestroyPacket* release_destroycontent();
  ::RType::DestroyPacket* mutable_destroycontent();
  void set_allocated_destroycontent(::RType::DestroyPacket* destroycontent);
  private:
  const ::RType::DestroyPacket& _internal_destroycontent() const;
  ::RType::DestroyPacket* _internal_mutable_destroycontent();
  public:

  // .RType.PositionPacket positionContent = 7;
  bool has_positioncontent() const;
  private:
  bool _internal_has_positioncontent() const;
  public:
  void clear_positioncontent();
  const ::RType::PositionPacket& positioncontent() const;
  ::RType::PositionPacket* release_positioncontent();
  ::RType::PositionPacket* mutable_positioncontent();
  void set_allocated_positioncontent(::RType::PositionPacket* positioncontent);
  private:
  const ::RType::PositionPacket& _internal_positioncontent() const;
  ::RType::PositionPacket* _internal_mutable_positioncontent();
  public:

  // .RType.EffectPacket effectContent = 8;
  bool has_effectcontent() const;
  private:
  bool _internal_has_effectcontent() const;
  public:
  void clear_effectcontent();
  const ::RType::EffectPacket& effectcontent() const;
  ::RType::EffectPacket* release_effectcontent();
  ::RType::EffectPacket* mutable_effectcontent();
  void set_allocated_effectcontent(::RType::EffectPacket* effectcontent);
  private:
  const ::RType::EffectPacket& _internal_effectcontent() const;
  ::RType::EffectPacket* _internal_mutable_effectcontent();
  public:

  void clear_uvar();
  UvarCase uvar_case() const;
  // @@protoc_insertion_point(class_scope:RType.RGamePack)
 private:
  class _Internal;
  void set_has_actioncontent();
  void set_has_collidepacket();
  void set_has_loadcontent();
  void set_has_destroycontent();
  void set_has_positioncontent();
  void set_has_effectcontent();

  inline bool has_uvar() const;
  inline void clear_has_uvar();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 playerid_;
  union UvarUnion {
    UvarUnion() {}
    ::RType::ActionPacket* actioncontent_;
    ::RType::CollidePacket* collidepacket_;
    ::RType::LoadPacket* loadcontent_;
    ::RType::DestroyPacket* destroycontent_;
    ::RType::PositionPacket* positioncontent_;
    ::RType::EffectPacket* effectcontent_;
  } uvar_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_RGamePack_2eproto;
};
// -------------------------------------------------------------------

class ActionPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RType.ActionPacket) */ {
 public:
  ActionPacket();
  virtual ~ActionPacket();

  ActionPacket(const ActionPacket& from);
  ActionPacket(ActionPacket&& from) noexcept
    : ActionPacket() {
    *this = ::std::move(from);
  }

  inline ActionPacket& operator=(const ActionPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActionPacket& operator=(ActionPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActionPacket& default_instance();

  enum SLvlCase {
    kShootLevel = 3,
    SLVL_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActionPacket* internal_default_instance() {
    return reinterpret_cast<const ActionPacket*>(
               &_ActionPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ActionPacket& a, ActionPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(ActionPacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActionPacket* New() const final {
    return CreateMaybeMessage<ActionPacket>(nullptr);
  }

  ActionPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActionPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActionPacket& from);
  void MergeFrom(const ActionPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActionPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RType.ActionPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RGamePack_2eproto);
    return ::descriptor_table_RGamePack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ActionPacket_ActionType ActionType;
  static constexpr ActionType UP =
    ActionPacket_ActionType_UP;
  static constexpr ActionType DOWN =
    ActionPacket_ActionType_DOWN;
  static constexpr ActionType LEFT =
    ActionPacket_ActionType_LEFT;
  static constexpr ActionType RIGHT =
    ActionPacket_ActionType_RIGHT;
  static constexpr ActionType SHOOT =
    ActionPacket_ActionType_SHOOT;
  static inline bool ActionType_IsValid(int value) {
    return ActionPacket_ActionType_IsValid(value);
  }
  static constexpr ActionType ActionType_MIN =
    ActionPacket_ActionType_ActionType_MIN;
  static constexpr ActionType ActionType_MAX =
    ActionPacket_ActionType_ActionType_MAX;
  static constexpr int ActionType_ARRAYSIZE =
    ActionPacket_ActionType_ActionType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ActionType_descriptor() {
    return ActionPacket_ActionType_descriptor();
  }
  template<typename T>
  static inline const std::string& ActionType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ActionType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ActionType_Name.");
    return ActionPacket_ActionType_Name(enum_t_value);
  }
  static inline bool ActionType_Parse(const std::string& name,
      ActionType* value) {
    return ActionPacket_ActionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kShootLevelFieldNumber = 3,
  };
  // uint32 Id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .RType.ActionPacket.ActionType type = 2;
  void clear_type();
  ::RType::ActionPacket_ActionType type() const;
  void set_type(::RType::ActionPacket_ActionType value);
  private:
  ::RType::ActionPacket_ActionType _internal_type() const;
  void _internal_set_type(::RType::ActionPacket_ActionType value);
  public:

  // uint64 shootLevel = 3;
  private:
  bool _internal_has_shootlevel() const;
  public:
  void clear_shootlevel();
  ::PROTOBUF_NAMESPACE_ID::uint64 shootlevel() const;
  void set_shootlevel(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_shootlevel() const;
  void _internal_set_shootlevel(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  void clear_sLvl();
  SLvlCase sLvl_case() const;
  // @@protoc_insertion_point(class_scope:RType.ActionPacket)
 private:
  class _Internal;
  void set_has_shootlevel();

  inline bool has_sLvl() const;
  inline void clear_has_sLvl();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  int type_;
  union SLvlUnion {
    SLvlUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint64 shootlevel_;
  } sLvl_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_RGamePack_2eproto;
};
// -------------------------------------------------------------------

class CollidePacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RType.CollidePacket) */ {
 public:
  CollidePacket();
  virtual ~CollidePacket();

  CollidePacket(const CollidePacket& from);
  CollidePacket(CollidePacket&& from) noexcept
    : CollidePacket() {
    *this = ::std::move(from);
  }

  inline CollidePacket& operator=(const CollidePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollidePacket& operator=(CollidePacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CollidePacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CollidePacket* internal_default_instance() {
    return reinterpret_cast<const CollidePacket*>(
               &_CollidePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CollidePacket& a, CollidePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(CollidePacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CollidePacket* New() const final {
    return CreateMaybeMessage<CollidePacket>(nullptr);
  }

  CollidePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CollidePacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CollidePacket& from);
  void MergeFrom(const CollidePacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollidePacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RType.CollidePacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RGamePack_2eproto);
    return ::descriptor_table_RGamePack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
  };
  // repeated uint64 Ids = 1 [packed = true];
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_ids() const;
  void _internal_add_ids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 ids(int index) const;
  void set_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_ids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_ids();

  // @@protoc_insertion_point(class_scope:RType.CollidePacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > ids_;
  mutable std::atomic<int> _ids_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RGamePack_2eproto;
};
// -------------------------------------------------------------------

class Vector2 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RType.Vector2) */ {
 public:
  Vector2();
  virtual ~Vector2();

  Vector2(const Vector2& from);
  Vector2(Vector2&& from) noexcept
    : Vector2() {
    *this = ::std::move(from);
  }

  inline Vector2& operator=(const Vector2& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector2& operator=(Vector2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vector2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector2* internal_default_instance() {
    return reinterpret_cast<const Vector2*>(
               &_Vector2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Vector2& a, Vector2& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector2* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector2* New() const final {
    return CreateMaybeMessage<Vector2>(nullptr);
  }

  Vector2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector2& from);
  void MergeFrom(const Vector2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RType.Vector2";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RGamePack_2eproto);
    return ::descriptor_table_RGamePack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // double X = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double Y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:RType.Vector2)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RGamePack_2eproto;
};
// -------------------------------------------------------------------

class LoadPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RType.LoadPacket) */ {
 public:
  LoadPacket();
  virtual ~LoadPacket();

  LoadPacket(const LoadPacket& from);
  LoadPacket(LoadPacket&& from) noexcept
    : LoadPacket() {
    *this = ::std::move(from);
  }

  inline LoadPacket& operator=(const LoadPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadPacket& operator=(LoadPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadPacket* internal_default_instance() {
    return reinterpret_cast<const LoadPacket*>(
               &_LoadPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LoadPacket& a, LoadPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadPacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadPacket* New() const final {
    return CreateMaybeMessage<LoadPacket>(nullptr);
  }

  LoadPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadPacket& from);
  void MergeFrom(const LoadPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RType.LoadPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RGamePack_2eproto);
    return ::descriptor_table_RGamePack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LoadPacket_EntityType EntityType;
  static constexpr EntityType PLAYER =
    LoadPacket_EntityType_PLAYER;
  static constexpr EntityType ENEMY =
    LoadPacket_EntityType_ENEMY;
  static constexpr EntityType ALLY =
    LoadPacket_EntityType_ALLY;
  static constexpr EntityType POWERUP =
    LoadPacket_EntityType_POWERUP;
  static constexpr EntityType BASIC_SHOT =
    LoadPacket_EntityType_BASIC_SHOT;
  static constexpr EntityType ENEMY_BULLET =
    LoadPacket_EntityType_ENEMY_BULLET;
  static inline bool EntityType_IsValid(int value) {
    return LoadPacket_EntityType_IsValid(value);
  }
  static constexpr EntityType EntityType_MIN =
    LoadPacket_EntityType_EntityType_MIN;
  static constexpr EntityType EntityType_MAX =
    LoadPacket_EntityType_EntityType_MAX;
  static constexpr int EntityType_ARRAYSIZE =
    LoadPacket_EntityType_EntityType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EntityType_descriptor() {
    return LoadPacket_EntityType_descriptor();
  }
  template<typename T>
  static inline const std::string& EntityType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EntityType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EntityType_Name.");
    return LoadPacket_EntityType_Name(enum_t_value);
  }
  static inline bool EntityType_Parse(const std::string& name,
      EntityType* value) {
    return LoadPacket_EntityType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 3,
    kPositionFieldNumber = 4,
    kScaleFieldNumber = 5,
    kSizeFieldNumber = 6,
    kAnimFrameInfoFieldNumber = 7,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string fileName = 3;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // .RType.Vector2 position = 4;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::RType::Vector2& position() const;
  ::RType::Vector2* release_position();
  ::RType::Vector2* mutable_position();
  void set_allocated_position(::RType::Vector2* position);
  private:
  const ::RType::Vector2& _internal_position() const;
  ::RType::Vector2* _internal_mutable_position();
  public:

  // .RType.Vector2 scale = 5;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  const ::RType::Vector2& scale() const;
  ::RType::Vector2* release_scale();
  ::RType::Vector2* mutable_scale();
  void set_allocated_scale(::RType::Vector2* scale);
  private:
  const ::RType::Vector2& _internal_scale() const;
  ::RType::Vector2* _internal_mutable_scale();
  public:

  // .RType.Vector2 size = 6;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::RType::Vector2& size() const;
  ::RType::Vector2* release_size();
  ::RType::Vector2* mutable_size();
  void set_allocated_size(::RType::Vector2* size);
  private:
  const ::RType::Vector2& _internal_size() const;
  ::RType::Vector2* _internal_mutable_size();
  public:

  // .RType.Vector2 animFrameInfo = 7;
  bool has_animframeinfo() const;
  private:
  bool _internal_has_animframeinfo() const;
  public:
  void clear_animframeinfo();
  const ::RType::Vector2& animframeinfo() const;
  ::RType::Vector2* release_animframeinfo();
  ::RType::Vector2* mutable_animframeinfo();
  void set_allocated_animframeinfo(::RType::Vector2* animframeinfo);
  private:
  const ::RType::Vector2& _internal_animframeinfo() const;
  ::RType::Vector2* _internal_mutable_animframeinfo();
  public:

  // uint32 Id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .RType.LoadPacket.EntityType type = 2;
  void clear_type();
  ::RType::LoadPacket_EntityType type() const;
  void set_type(::RType::LoadPacket_EntityType value);
  private:
  ::RType::LoadPacket_EntityType _internal_type() const;
  void _internal_set_type(::RType::LoadPacket_EntityType value);
  public:

  // @@protoc_insertion_point(class_scope:RType.LoadPacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::RType::Vector2* position_;
  ::RType::Vector2* scale_;
  ::RType::Vector2* size_;
  ::RType::Vector2* animframeinfo_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RGamePack_2eproto;
};
// -------------------------------------------------------------------

class DestroyPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RType.DestroyPacket) */ {
 public:
  DestroyPacket();
  virtual ~DestroyPacket();

  DestroyPacket(const DestroyPacket& from);
  DestroyPacket(DestroyPacket&& from) noexcept
    : DestroyPacket() {
    *this = ::std::move(from);
  }

  inline DestroyPacket& operator=(const DestroyPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DestroyPacket& operator=(DestroyPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DestroyPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DestroyPacket* internal_default_instance() {
    return reinterpret_cast<const DestroyPacket*>(
               &_DestroyPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DestroyPacket& a, DestroyPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DestroyPacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DestroyPacket* New() const final {
    return CreateMaybeMessage<DestroyPacket>(nullptr);
  }

  DestroyPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DestroyPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DestroyPacket& from);
  void MergeFrom(const DestroyPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DestroyPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RType.DestroyPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RGamePack_2eproto);
    return ::descriptor_table_RGamePack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
  };
  // repeated uint32 Ids = 1 [packed = true];
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_ids() const;
  void _internal_add_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 ids(int index) const;
  void set_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_ids();

  // @@protoc_insertion_point(class_scope:RType.DestroyPacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > ids_;
  mutable std::atomic<int> _ids_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RGamePack_2eproto;
};
// -------------------------------------------------------------------

class PositionPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RType.PositionPacket) */ {
 public:
  PositionPacket();
  virtual ~PositionPacket();

  PositionPacket(const PositionPacket& from);
  PositionPacket(PositionPacket&& from) noexcept
    : PositionPacket() {
    *this = ::std::move(from);
  }

  inline PositionPacket& operator=(const PositionPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionPacket& operator=(PositionPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PositionPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PositionPacket* internal_default_instance() {
    return reinterpret_cast<const PositionPacket*>(
               &_PositionPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PositionPacket& a, PositionPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionPacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionPacket* New() const final {
    return CreateMaybeMessage<PositionPacket>(nullptr);
  }

  PositionPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PositionPacket& from);
  void MergeFrom(const PositionPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RType.PositionPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RGamePack_2eproto);
    return ::descriptor_table_RGamePack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPositionFieldNumber = 2,
    kVelocityFieldNumber = 3,
    kHasVelocityFieldNumber = 4,
  };
  // repeated uint32 Id = 1 [packed = true];
  int id_size() const;
  private:
  int _internal_id_size() const;
  public:
  void clear_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_id() const;
  void _internal_add_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 id(int index) const;
  void set_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_id();

  // repeated .RType.Vector2 position = 2;
  int position_size() const;
  private:
  int _internal_position_size() const;
  public:
  void clear_position();
  ::RType::Vector2* mutable_position(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RType::Vector2 >*
      mutable_position();
  private:
  const ::RType::Vector2& _internal_position(int index) const;
  ::RType::Vector2* _internal_add_position();
  public:
  const ::RType::Vector2& position(int index) const;
  ::RType::Vector2* add_position();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RType::Vector2 >&
      position() const;

  // repeated int32 velocity = 3;
  int velocity_size() const;
  private:
  int _internal_velocity_size() const;
  public:
  void clear_velocity();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_velocity(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_velocity() const;
  void _internal_add_velocity(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_velocity();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 velocity(int index) const;
  void set_velocity(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_velocity(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      velocity() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_velocity();

  // bool has_velocity = 4;
  void clear_has_velocity();
  bool has_velocity() const;
  void set_has_velocity(bool value);
  private:
  bool _internal_has_velocity() const;
  void _internal_set_has_velocity(bool value);
  public:

  // @@protoc_insertion_point(class_scope:RType.PositionPacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > id_;
  mutable std::atomic<int> _id_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RType::Vector2 > position_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > velocity_;
  mutable std::atomic<int> _velocity_cached_byte_size_;
  bool has_velocity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RGamePack_2eproto;
};
// -------------------------------------------------------------------

class EffectPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RType.EffectPacket) */ {
 public:
  EffectPacket();
  virtual ~EffectPacket();

  EffectPacket(const EffectPacket& from);
  EffectPacket(EffectPacket&& from) noexcept
    : EffectPacket() {
    *this = ::std::move(from);
  }

  inline EffectPacket& operator=(const EffectPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline EffectPacket& operator=(EffectPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EffectPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EffectPacket* internal_default_instance() {
    return reinterpret_cast<const EffectPacket*>(
               &_EffectPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(EffectPacket& a, EffectPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(EffectPacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EffectPacket* New() const final {
    return CreateMaybeMessage<EffectPacket>(nullptr);
  }

  EffectPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EffectPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EffectPacket& from);
  void MergeFrom(const EffectPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EffectPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RType.EffectPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RGamePack_2eproto);
    return ::descriptor_table_RGamePack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef EffectPacket_EffectType EffectType;
  static constexpr EffectType SPEED =
    EffectPacket_EffectType_SPEED;
  static constexpr EffectType ATTACKSPEED =
    EffectPacket_EffectType_ATTACKSPEED;
  static constexpr EffectType SHIELD =
    EffectPacket_EffectType_SHIELD;
  static constexpr EffectType LIFE =
    EffectPacket_EffectType_LIFE;
  static inline bool EffectType_IsValid(int value) {
    return EffectPacket_EffectType_IsValid(value);
  }
  static constexpr EffectType EffectType_MIN =
    EffectPacket_EffectType_EffectType_MIN;
  static constexpr EffectType EffectType_MAX =
    EffectPacket_EffectType_EffectType_MAX;
  static constexpr int EffectType_ARRAYSIZE =
    EffectPacket_EffectType_EffectType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EffectType_descriptor() {
    return EffectPacket_EffectType_descriptor();
  }
  template<typename T>
  static inline const std::string& EffectType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EffectType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EffectType_Name.");
    return EffectPacket_EffectType_Name(enum_t_value);
  }
  static inline bool EffectType_Parse(const std::string& name,
      EffectType* value) {
    return EffectPacket_EffectType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // uint32 playerId = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::uint32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .RType.EffectPacket.EffectType type = 2;
  void clear_type();
  ::RType::EffectPacket_EffectType type() const;
  void set_type(::RType::EffectPacket_EffectType value);
  private:
  ::RType::EffectPacket_EffectType _internal_type() const;
  void _internal_set_type(::RType::EffectPacket_EffectType value);
  public:

  // @@protoc_insertion_point(class_scope:RType.EffectPacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 playerid_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RGamePack_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RGamePack

// .RType.RGamePack.PackType code = 1;
inline void RGamePack::clear_code() {
  code_ = 0;
}
inline ::RType::RGamePack_PackType RGamePack::_internal_code() const {
  return static_cast< ::RType::RGamePack_PackType >(code_);
}
inline ::RType::RGamePack_PackType RGamePack::code() const {
  // @@protoc_insertion_point(field_get:RType.RGamePack.code)
  return _internal_code();
}
inline void RGamePack::_internal_set_code(::RType::RGamePack_PackType value) {
  
  code_ = value;
}
inline void RGamePack::set_code(::RType::RGamePack_PackType value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:RType.RGamePack.code)
}

// uint32 playerId = 2;
inline void RGamePack::clear_playerid() {
  playerid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RGamePack::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RGamePack::playerid() const {
  // @@protoc_insertion_point(field_get:RType.RGamePack.playerId)
  return _internal_playerid();
}
inline void RGamePack::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  playerid_ = value;
}
inline void RGamePack::set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:RType.RGamePack.playerId)
}

// .RType.ActionPacket actionContent = 3;
inline bool RGamePack::_internal_has_actioncontent() const {
  return uvar_case() == kActionContent;
}
inline bool RGamePack::has_actioncontent() const {
  return _internal_has_actioncontent();
}
inline void RGamePack::set_has_actioncontent() {
  _oneof_case_[0] = kActionContent;
}
inline void RGamePack::clear_actioncontent() {
  if (_internal_has_actioncontent()) {
    delete uvar_.actioncontent_;
    clear_has_uvar();
  }
}
inline ::RType::ActionPacket* RGamePack::release_actioncontent() {
  // @@protoc_insertion_point(field_release:RType.RGamePack.actionContent)
  if (_internal_has_actioncontent()) {
    clear_has_uvar();
      ::RType::ActionPacket* temp = uvar_.actioncontent_;
    uvar_.actioncontent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::RType::ActionPacket& RGamePack::_internal_actioncontent() const {
  return _internal_has_actioncontent()
      ? *uvar_.actioncontent_
      : *reinterpret_cast< ::RType::ActionPacket*>(&::RType::_ActionPacket_default_instance_);
}
inline const ::RType::ActionPacket& RGamePack::actioncontent() const {
  // @@protoc_insertion_point(field_get:RType.RGamePack.actionContent)
  return _internal_actioncontent();
}
inline ::RType::ActionPacket* RGamePack::_internal_mutable_actioncontent() {
  if (!_internal_has_actioncontent()) {
    clear_uvar();
    set_has_actioncontent();
    uvar_.actioncontent_ = CreateMaybeMessage< ::RType::ActionPacket >(
        GetArenaNoVirtual());
  }
  return uvar_.actioncontent_;
}
inline ::RType::ActionPacket* RGamePack::mutable_actioncontent() {
  // @@protoc_insertion_point(field_mutable:RType.RGamePack.actionContent)
  return _internal_mutable_actioncontent();
}

// .RType.CollidePacket collidePacket = 4;
inline bool RGamePack::_internal_has_collidepacket() const {
  return uvar_case() == kCollidePacket;
}
inline bool RGamePack::has_collidepacket() const {
  return _internal_has_collidepacket();
}
inline void RGamePack::set_has_collidepacket() {
  _oneof_case_[0] = kCollidePacket;
}
inline void RGamePack::clear_collidepacket() {
  if (_internal_has_collidepacket()) {
    delete uvar_.collidepacket_;
    clear_has_uvar();
  }
}
inline ::RType::CollidePacket* RGamePack::release_collidepacket() {
  // @@protoc_insertion_point(field_release:RType.RGamePack.collidePacket)
  if (_internal_has_collidepacket()) {
    clear_has_uvar();
      ::RType::CollidePacket* temp = uvar_.collidepacket_;
    uvar_.collidepacket_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::RType::CollidePacket& RGamePack::_internal_collidepacket() const {
  return _internal_has_collidepacket()
      ? *uvar_.collidepacket_
      : *reinterpret_cast< ::RType::CollidePacket*>(&::RType::_CollidePacket_default_instance_);
}
inline const ::RType::CollidePacket& RGamePack::collidepacket() const {
  // @@protoc_insertion_point(field_get:RType.RGamePack.collidePacket)
  return _internal_collidepacket();
}
inline ::RType::CollidePacket* RGamePack::_internal_mutable_collidepacket() {
  if (!_internal_has_collidepacket()) {
    clear_uvar();
    set_has_collidepacket();
    uvar_.collidepacket_ = CreateMaybeMessage< ::RType::CollidePacket >(
        GetArenaNoVirtual());
  }
  return uvar_.collidepacket_;
}
inline ::RType::CollidePacket* RGamePack::mutable_collidepacket() {
  // @@protoc_insertion_point(field_mutable:RType.RGamePack.collidePacket)
  return _internal_mutable_collidepacket();
}

// .RType.LoadPacket loadContent = 5;
inline bool RGamePack::_internal_has_loadcontent() const {
  return uvar_case() == kLoadContent;
}
inline bool RGamePack::has_loadcontent() const {
  return _internal_has_loadcontent();
}
inline void RGamePack::set_has_loadcontent() {
  _oneof_case_[0] = kLoadContent;
}
inline void RGamePack::clear_loadcontent() {
  if (_internal_has_loadcontent()) {
    delete uvar_.loadcontent_;
    clear_has_uvar();
  }
}
inline ::RType::LoadPacket* RGamePack::release_loadcontent() {
  // @@protoc_insertion_point(field_release:RType.RGamePack.loadContent)
  if (_internal_has_loadcontent()) {
    clear_has_uvar();
      ::RType::LoadPacket* temp = uvar_.loadcontent_;
    uvar_.loadcontent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::RType::LoadPacket& RGamePack::_internal_loadcontent() const {
  return _internal_has_loadcontent()
      ? *uvar_.loadcontent_
      : *reinterpret_cast< ::RType::LoadPacket*>(&::RType::_LoadPacket_default_instance_);
}
inline const ::RType::LoadPacket& RGamePack::loadcontent() const {
  // @@protoc_insertion_point(field_get:RType.RGamePack.loadContent)
  return _internal_loadcontent();
}
inline ::RType::LoadPacket* RGamePack::_internal_mutable_loadcontent() {
  if (!_internal_has_loadcontent()) {
    clear_uvar();
    set_has_loadcontent();
    uvar_.loadcontent_ = CreateMaybeMessage< ::RType::LoadPacket >(
        GetArenaNoVirtual());
  }
  return uvar_.loadcontent_;
}
inline ::RType::LoadPacket* RGamePack::mutable_loadcontent() {
  // @@protoc_insertion_point(field_mutable:RType.RGamePack.loadContent)
  return _internal_mutable_loadcontent();
}

// .RType.DestroyPacket destroyContent = 6;
inline bool RGamePack::_internal_has_destroycontent() const {
  return uvar_case() == kDestroyContent;
}
inline bool RGamePack::has_destroycontent() const {
  return _internal_has_destroycontent();
}
inline void RGamePack::set_has_destroycontent() {
  _oneof_case_[0] = kDestroyContent;
}
inline void RGamePack::clear_destroycontent() {
  if (_internal_has_destroycontent()) {
    delete uvar_.destroycontent_;
    clear_has_uvar();
  }
}
inline ::RType::DestroyPacket* RGamePack::release_destroycontent() {
  // @@protoc_insertion_point(field_release:RType.RGamePack.destroyContent)
  if (_internal_has_destroycontent()) {
    clear_has_uvar();
      ::RType::DestroyPacket* temp = uvar_.destroycontent_;
    uvar_.destroycontent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::RType::DestroyPacket& RGamePack::_internal_destroycontent() const {
  return _internal_has_destroycontent()
      ? *uvar_.destroycontent_
      : *reinterpret_cast< ::RType::DestroyPacket*>(&::RType::_DestroyPacket_default_instance_);
}
inline const ::RType::DestroyPacket& RGamePack::destroycontent() const {
  // @@protoc_insertion_point(field_get:RType.RGamePack.destroyContent)
  return _internal_destroycontent();
}
inline ::RType::DestroyPacket* RGamePack::_internal_mutable_destroycontent() {
  if (!_internal_has_destroycontent()) {
    clear_uvar();
    set_has_destroycontent();
    uvar_.destroycontent_ = CreateMaybeMessage< ::RType::DestroyPacket >(
        GetArenaNoVirtual());
  }
  return uvar_.destroycontent_;
}
inline ::RType::DestroyPacket* RGamePack::mutable_destroycontent() {
  // @@protoc_insertion_point(field_mutable:RType.RGamePack.destroyContent)
  return _internal_mutable_destroycontent();
}

// .RType.PositionPacket positionContent = 7;
inline bool RGamePack::_internal_has_positioncontent() const {
  return uvar_case() == kPositionContent;
}
inline bool RGamePack::has_positioncontent() const {
  return _internal_has_positioncontent();
}
inline void RGamePack::set_has_positioncontent() {
  _oneof_case_[0] = kPositionContent;
}
inline void RGamePack::clear_positioncontent() {
  if (_internal_has_positioncontent()) {
    delete uvar_.positioncontent_;
    clear_has_uvar();
  }
}
inline ::RType::PositionPacket* RGamePack::release_positioncontent() {
  // @@protoc_insertion_point(field_release:RType.RGamePack.positionContent)
  if (_internal_has_positioncontent()) {
    clear_has_uvar();
      ::RType::PositionPacket* temp = uvar_.positioncontent_;
    uvar_.positioncontent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::RType::PositionPacket& RGamePack::_internal_positioncontent() const {
  return _internal_has_positioncontent()
      ? *uvar_.positioncontent_
      : *reinterpret_cast< ::RType::PositionPacket*>(&::RType::_PositionPacket_default_instance_);
}
inline const ::RType::PositionPacket& RGamePack::positioncontent() const {
  // @@protoc_insertion_point(field_get:RType.RGamePack.positionContent)
  return _internal_positioncontent();
}
inline ::RType::PositionPacket* RGamePack::_internal_mutable_positioncontent() {
  if (!_internal_has_positioncontent()) {
    clear_uvar();
    set_has_positioncontent();
    uvar_.positioncontent_ = CreateMaybeMessage< ::RType::PositionPacket >(
        GetArenaNoVirtual());
  }
  return uvar_.positioncontent_;
}
inline ::RType::PositionPacket* RGamePack::mutable_positioncontent() {
  // @@protoc_insertion_point(field_mutable:RType.RGamePack.positionContent)
  return _internal_mutable_positioncontent();
}

// .RType.EffectPacket effectContent = 8;
inline bool RGamePack::_internal_has_effectcontent() const {
  return uvar_case() == kEffectContent;
}
inline bool RGamePack::has_effectcontent() const {
  return _internal_has_effectcontent();
}
inline void RGamePack::set_has_effectcontent() {
  _oneof_case_[0] = kEffectContent;
}
inline void RGamePack::clear_effectcontent() {
  if (_internal_has_effectcontent()) {
    delete uvar_.effectcontent_;
    clear_has_uvar();
  }
}
inline ::RType::EffectPacket* RGamePack::release_effectcontent() {
  // @@protoc_insertion_point(field_release:RType.RGamePack.effectContent)
  if (_internal_has_effectcontent()) {
    clear_has_uvar();
      ::RType::EffectPacket* temp = uvar_.effectcontent_;
    uvar_.effectcontent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::RType::EffectPacket& RGamePack::_internal_effectcontent() const {
  return _internal_has_effectcontent()
      ? *uvar_.effectcontent_
      : *reinterpret_cast< ::RType::EffectPacket*>(&::RType::_EffectPacket_default_instance_);
}
inline const ::RType::EffectPacket& RGamePack::effectcontent() const {
  // @@protoc_insertion_point(field_get:RType.RGamePack.effectContent)
  return _internal_effectcontent();
}
inline ::RType::EffectPacket* RGamePack::_internal_mutable_effectcontent() {
  if (!_internal_has_effectcontent()) {
    clear_uvar();
    set_has_effectcontent();
    uvar_.effectcontent_ = CreateMaybeMessage< ::RType::EffectPacket >(
        GetArenaNoVirtual());
  }
  return uvar_.effectcontent_;
}
inline ::RType::EffectPacket* RGamePack::mutable_effectcontent() {
  // @@protoc_insertion_point(field_mutable:RType.RGamePack.effectContent)
  return _internal_mutable_effectcontent();
}

inline bool RGamePack::has_uvar() const {
  return uvar_case() != UVAR_NOT_SET;
}
inline void RGamePack::clear_has_uvar() {
  _oneof_case_[0] = UVAR_NOT_SET;
}
inline RGamePack::UvarCase RGamePack::uvar_case() const {
  return RGamePack::UvarCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ActionPacket

// uint32 Id = 1;
inline void ActionPacket::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActionPacket::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActionPacket::id() const {
  // @@protoc_insertion_point(field_get:RType.ActionPacket.Id)
  return _internal_id();
}
inline void ActionPacket::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void ActionPacket::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:RType.ActionPacket.Id)
}

// .RType.ActionPacket.ActionType type = 2;
inline void ActionPacket::clear_type() {
  type_ = 0;
}
inline ::RType::ActionPacket_ActionType ActionPacket::_internal_type() const {
  return static_cast< ::RType::ActionPacket_ActionType >(type_);
}
inline ::RType::ActionPacket_ActionType ActionPacket::type() const {
  // @@protoc_insertion_point(field_get:RType.ActionPacket.type)
  return _internal_type();
}
inline void ActionPacket::_internal_set_type(::RType::ActionPacket_ActionType value) {
  
  type_ = value;
}
inline void ActionPacket::set_type(::RType::ActionPacket_ActionType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:RType.ActionPacket.type)
}

// uint64 shootLevel = 3;
inline bool ActionPacket::_internal_has_shootlevel() const {
  return sLvl_case() == kShootLevel;
}
inline void ActionPacket::set_has_shootlevel() {
  _oneof_case_[0] = kShootLevel;
}
inline void ActionPacket::clear_shootlevel() {
  if (_internal_has_shootlevel()) {
    sLvl_.shootlevel_ = PROTOBUF_ULONGLONG(0);
    clear_has_sLvl();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ActionPacket::_internal_shootlevel() const {
  if (_internal_has_shootlevel()) {
    return sLvl_.shootlevel_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void ActionPacket::_internal_set_shootlevel(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_shootlevel()) {
    clear_sLvl();
    set_has_shootlevel();
  }
  sLvl_.shootlevel_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ActionPacket::shootlevel() const {
  // @@protoc_insertion_point(field_get:RType.ActionPacket.shootLevel)
  return _internal_shootlevel();
}
inline void ActionPacket::set_shootlevel(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_shootlevel(value);
  // @@protoc_insertion_point(field_set:RType.ActionPacket.shootLevel)
}

inline bool ActionPacket::has_sLvl() const {
  return sLvl_case() != SLVL_NOT_SET;
}
inline void ActionPacket::clear_has_sLvl() {
  _oneof_case_[0] = SLVL_NOT_SET;
}
inline ActionPacket::SLvlCase ActionPacket::sLvl_case() const {
  return ActionPacket::SLvlCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CollidePacket

// repeated uint64 Ids = 1 [packed = true];
inline int CollidePacket::_internal_ids_size() const {
  return ids_.size();
}
inline int CollidePacket::ids_size() const {
  return _internal_ids_size();
}
inline void CollidePacket::clear_ids() {
  ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CollidePacket::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CollidePacket::ids(int index) const {
  // @@protoc_insertion_point(field_get:RType.CollidePacket.Ids)
  return _internal_ids(index);
}
inline void CollidePacket::set_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:RType.CollidePacket.Ids)
}
inline void CollidePacket::_internal_add_ids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  ids_.Add(value);
}
inline void CollidePacket::add_ids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_ids(value);
  // @@protoc_insertion_point(field_add:RType.CollidePacket.Ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CollidePacket::_internal_ids() const {
  return ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CollidePacket::ids() const {
  // @@protoc_insertion_point(field_list:RType.CollidePacket.Ids)
  return _internal_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CollidePacket::_internal_mutable_ids() {
  return &ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CollidePacket::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:RType.CollidePacket.Ids)
  return _internal_mutable_ids();
}

// -------------------------------------------------------------------

// Vector2

// double X = 1;
inline void Vector2::clear_x() {
  x_ = 0;
}
inline double Vector2::_internal_x() const {
  return x_;
}
inline double Vector2::x() const {
  // @@protoc_insertion_point(field_get:RType.Vector2.X)
  return _internal_x();
}
inline void Vector2::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Vector2::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:RType.Vector2.X)
}

// double Y = 2;
inline void Vector2::clear_y() {
  y_ = 0;
}
inline double Vector2::_internal_y() const {
  return y_;
}
inline double Vector2::y() const {
  // @@protoc_insertion_point(field_get:RType.Vector2.Y)
  return _internal_y();
}
inline void Vector2::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Vector2::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:RType.Vector2.Y)
}

// -------------------------------------------------------------------

// LoadPacket

// uint32 Id = 1;
inline void LoadPacket::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoadPacket::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoadPacket::id() const {
  // @@protoc_insertion_point(field_get:RType.LoadPacket.Id)
  return _internal_id();
}
inline void LoadPacket::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void LoadPacket::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:RType.LoadPacket.Id)
}

// .RType.LoadPacket.EntityType type = 2;
inline void LoadPacket::clear_type() {
  type_ = 0;
}
inline ::RType::LoadPacket_EntityType LoadPacket::_internal_type() const {
  return static_cast< ::RType::LoadPacket_EntityType >(type_);
}
inline ::RType::LoadPacket_EntityType LoadPacket::type() const {
  // @@protoc_insertion_point(field_get:RType.LoadPacket.type)
  return _internal_type();
}
inline void LoadPacket::_internal_set_type(::RType::LoadPacket_EntityType value) {
  
  type_ = value;
}
inline void LoadPacket::set_type(::RType::LoadPacket_EntityType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:RType.LoadPacket.type)
}

// string fileName = 3;
inline void LoadPacket::clear_filename() {
  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoadPacket::filename() const {
  // @@protoc_insertion_point(field_get:RType.LoadPacket.fileName)
  return _internal_filename();
}
inline void LoadPacket::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:RType.LoadPacket.fileName)
}
inline std::string* LoadPacket::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:RType.LoadPacket.fileName)
  return _internal_mutable_filename();
}
inline const std::string& LoadPacket::_internal_filename() const {
  return filename_.GetNoArena();
}
inline void LoadPacket::_internal_set_filename(const std::string& value) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoadPacket::set_filename(std::string&& value) {
  
  filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RType.LoadPacket.fileName)
}
inline void LoadPacket::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RType.LoadPacket.fileName)
}
inline void LoadPacket::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RType.LoadPacket.fileName)
}
inline std::string* LoadPacket::_internal_mutable_filename() {
  
  return filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoadPacket::release_filename() {
  // @@protoc_insertion_point(field_release:RType.LoadPacket.fileName)
  
  return filename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoadPacket::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:RType.LoadPacket.fileName)
}

// .RType.Vector2 position = 4;
inline bool LoadPacket::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool LoadPacket::has_position() const {
  return _internal_has_position();
}
inline void LoadPacket::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::RType::Vector2& LoadPacket::_internal_position() const {
  const ::RType::Vector2* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RType::Vector2*>(
      &::RType::_Vector2_default_instance_);
}
inline const ::RType::Vector2& LoadPacket::position() const {
  // @@protoc_insertion_point(field_get:RType.LoadPacket.position)
  return _internal_position();
}
inline ::RType::Vector2* LoadPacket::release_position() {
  // @@protoc_insertion_point(field_release:RType.LoadPacket.position)
  
  ::RType::Vector2* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::RType::Vector2* LoadPacket::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::RType::Vector2>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::RType::Vector2* LoadPacket::mutable_position() {
  // @@protoc_insertion_point(field_mutable:RType.LoadPacket.position)
  return _internal_mutable_position();
}
inline void LoadPacket::set_allocated_position(::RType::Vector2* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:RType.LoadPacket.position)
}

// .RType.Vector2 scale = 5;
inline bool LoadPacket::_internal_has_scale() const {
  return this != internal_default_instance() && scale_ != nullptr;
}
inline bool LoadPacket::has_scale() const {
  return _internal_has_scale();
}
inline void LoadPacket::clear_scale() {
  if (GetArenaNoVirtual() == nullptr && scale_ != nullptr) {
    delete scale_;
  }
  scale_ = nullptr;
}
inline const ::RType::Vector2& LoadPacket::_internal_scale() const {
  const ::RType::Vector2* p = scale_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RType::Vector2*>(
      &::RType::_Vector2_default_instance_);
}
inline const ::RType::Vector2& LoadPacket::scale() const {
  // @@protoc_insertion_point(field_get:RType.LoadPacket.scale)
  return _internal_scale();
}
inline ::RType::Vector2* LoadPacket::release_scale() {
  // @@protoc_insertion_point(field_release:RType.LoadPacket.scale)
  
  ::RType::Vector2* temp = scale_;
  scale_ = nullptr;
  return temp;
}
inline ::RType::Vector2* LoadPacket::_internal_mutable_scale() {
  
  if (scale_ == nullptr) {
    auto* p = CreateMaybeMessage<::RType::Vector2>(GetArenaNoVirtual());
    scale_ = p;
  }
  return scale_;
}
inline ::RType::Vector2* LoadPacket::mutable_scale() {
  // @@protoc_insertion_point(field_mutable:RType.LoadPacket.scale)
  return _internal_mutable_scale();
}
inline void LoadPacket::set_allocated_scale(::RType::Vector2* scale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scale_;
  }
  if (scale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale, submessage_arena);
    }
    
  } else {
    
  }
  scale_ = scale;
  // @@protoc_insertion_point(field_set_allocated:RType.LoadPacket.scale)
}

// .RType.Vector2 size = 6;
inline bool LoadPacket::_internal_has_size() const {
  return this != internal_default_instance() && size_ != nullptr;
}
inline bool LoadPacket::has_size() const {
  return _internal_has_size();
}
inline void LoadPacket::clear_size() {
  if (GetArenaNoVirtual() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
}
inline const ::RType::Vector2& LoadPacket::_internal_size() const {
  const ::RType::Vector2* p = size_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RType::Vector2*>(
      &::RType::_Vector2_default_instance_);
}
inline const ::RType::Vector2& LoadPacket::size() const {
  // @@protoc_insertion_point(field_get:RType.LoadPacket.size)
  return _internal_size();
}
inline ::RType::Vector2* LoadPacket::release_size() {
  // @@protoc_insertion_point(field_release:RType.LoadPacket.size)
  
  ::RType::Vector2* temp = size_;
  size_ = nullptr;
  return temp;
}
inline ::RType::Vector2* LoadPacket::_internal_mutable_size() {
  
  if (size_ == nullptr) {
    auto* p = CreateMaybeMessage<::RType::Vector2>(GetArenaNoVirtual());
    size_ = p;
  }
  return size_;
}
inline ::RType::Vector2* LoadPacket::mutable_size() {
  // @@protoc_insertion_point(field_mutable:RType.LoadPacket.size)
  return _internal_mutable_size();
}
inline void LoadPacket::set_allocated_size(::RType::Vector2* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete size_;
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    
  } else {
    
  }
  size_ = size;
  // @@protoc_insertion_point(field_set_allocated:RType.LoadPacket.size)
}

// .RType.Vector2 animFrameInfo = 7;
inline bool LoadPacket::_internal_has_animframeinfo() const {
  return this != internal_default_instance() && animframeinfo_ != nullptr;
}
inline bool LoadPacket::has_animframeinfo() const {
  return _internal_has_animframeinfo();
}
inline void LoadPacket::clear_animframeinfo() {
  if (GetArenaNoVirtual() == nullptr && animframeinfo_ != nullptr) {
    delete animframeinfo_;
  }
  animframeinfo_ = nullptr;
}
inline const ::RType::Vector2& LoadPacket::_internal_animframeinfo() const {
  const ::RType::Vector2* p = animframeinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RType::Vector2*>(
      &::RType::_Vector2_default_instance_);
}
inline const ::RType::Vector2& LoadPacket::animframeinfo() const {
  // @@protoc_insertion_point(field_get:RType.LoadPacket.animFrameInfo)
  return _internal_animframeinfo();
}
inline ::RType::Vector2* LoadPacket::release_animframeinfo() {
  // @@protoc_insertion_point(field_release:RType.LoadPacket.animFrameInfo)
  
  ::RType::Vector2* temp = animframeinfo_;
  animframeinfo_ = nullptr;
  return temp;
}
inline ::RType::Vector2* LoadPacket::_internal_mutable_animframeinfo() {
  
  if (animframeinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::RType::Vector2>(GetArenaNoVirtual());
    animframeinfo_ = p;
  }
  return animframeinfo_;
}
inline ::RType::Vector2* LoadPacket::mutable_animframeinfo() {
  // @@protoc_insertion_point(field_mutable:RType.LoadPacket.animFrameInfo)
  return _internal_mutable_animframeinfo();
}
inline void LoadPacket::set_allocated_animframeinfo(::RType::Vector2* animframeinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete animframeinfo_;
  }
  if (animframeinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      animframeinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, animframeinfo, submessage_arena);
    }
    
  } else {
    
  }
  animframeinfo_ = animframeinfo;
  // @@protoc_insertion_point(field_set_allocated:RType.LoadPacket.animFrameInfo)
}

// -------------------------------------------------------------------

// DestroyPacket

// repeated uint32 Ids = 1 [packed = true];
inline int DestroyPacket::_internal_ids_size() const {
  return ids_.size();
}
inline int DestroyPacket::ids_size() const {
  return _internal_ids_size();
}
inline void DestroyPacket::clear_ids() {
  ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DestroyPacket::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DestroyPacket::ids(int index) const {
  // @@protoc_insertion_point(field_get:RType.DestroyPacket.Ids)
  return _internal_ids(index);
}
inline void DestroyPacket::set_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:RType.DestroyPacket.Ids)
}
inline void DestroyPacket::_internal_add_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ids_.Add(value);
}
inline void DestroyPacket::add_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_ids(value);
  // @@protoc_insertion_point(field_add:RType.DestroyPacket.Ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
DestroyPacket::_internal_ids() const {
  return ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
DestroyPacket::ids() const {
  // @@protoc_insertion_point(field_list:RType.DestroyPacket.Ids)
  return _internal_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
DestroyPacket::_internal_mutable_ids() {
  return &ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
DestroyPacket::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:RType.DestroyPacket.Ids)
  return _internal_mutable_ids();
}

// -------------------------------------------------------------------

// PositionPacket

// repeated uint32 Id = 1 [packed = true];
inline int PositionPacket::_internal_id_size() const {
  return id_.size();
}
inline int PositionPacket::id_size() const {
  return _internal_id_size();
}
inline void PositionPacket::clear_id() {
  id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PositionPacket::_internal_id(int index) const {
  return id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PositionPacket::id(int index) const {
  // @@protoc_insertion_point(field_get:RType.PositionPacket.Id)
  return _internal_id(index);
}
inline void PositionPacket::set_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  id_.Set(index, value);
  // @@protoc_insertion_point(field_set:RType.PositionPacket.Id)
}
inline void PositionPacket::_internal_add_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  id_.Add(value);
}
inline void PositionPacket::add_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_id(value);
  // @@protoc_insertion_point(field_add:RType.PositionPacket.Id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PositionPacket::_internal_id() const {
  return id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PositionPacket::id() const {
  // @@protoc_insertion_point(field_list:RType.PositionPacket.Id)
  return _internal_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PositionPacket::_internal_mutable_id() {
  return &id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PositionPacket::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:RType.PositionPacket.Id)
  return _internal_mutable_id();
}

// repeated .RType.Vector2 position = 2;
inline int PositionPacket::_internal_position_size() const {
  return position_.size();
}
inline int PositionPacket::position_size() const {
  return _internal_position_size();
}
inline void PositionPacket::clear_position() {
  position_.Clear();
}
inline ::RType::Vector2* PositionPacket::mutable_position(int index) {
  // @@protoc_insertion_point(field_mutable:RType.PositionPacket.position)
  return position_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RType::Vector2 >*
PositionPacket::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:RType.PositionPacket.position)
  return &position_;
}
inline const ::RType::Vector2& PositionPacket::_internal_position(int index) const {
  return position_.Get(index);
}
inline const ::RType::Vector2& PositionPacket::position(int index) const {
  // @@protoc_insertion_point(field_get:RType.PositionPacket.position)
  return _internal_position(index);
}
inline ::RType::Vector2* PositionPacket::_internal_add_position() {
  return position_.Add();
}
inline ::RType::Vector2* PositionPacket::add_position() {
  // @@protoc_insertion_point(field_add:RType.PositionPacket.position)
  return _internal_add_position();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RType::Vector2 >&
PositionPacket::position() const {
  // @@protoc_insertion_point(field_list:RType.PositionPacket.position)
  return position_;
}

// repeated int32 velocity = 3;
inline int PositionPacket::_internal_velocity_size() const {
  return velocity_.size();
}
inline int PositionPacket::velocity_size() const {
  return _internal_velocity_size();
}
inline void PositionPacket::clear_velocity() {
  velocity_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionPacket::_internal_velocity(int index) const {
  return velocity_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionPacket::velocity(int index) const {
  // @@protoc_insertion_point(field_get:RType.PositionPacket.velocity)
  return _internal_velocity(index);
}
inline void PositionPacket::set_velocity(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  velocity_.Set(index, value);
  // @@protoc_insertion_point(field_set:RType.PositionPacket.velocity)
}
inline void PositionPacket::_internal_add_velocity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  velocity_.Add(value);
}
inline void PositionPacket::add_velocity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_velocity(value);
  // @@protoc_insertion_point(field_add:RType.PositionPacket.velocity)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PositionPacket::_internal_velocity() const {
  return velocity_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PositionPacket::velocity() const {
  // @@protoc_insertion_point(field_list:RType.PositionPacket.velocity)
  return _internal_velocity();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PositionPacket::_internal_mutable_velocity() {
  return &velocity_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PositionPacket::mutable_velocity() {
  // @@protoc_insertion_point(field_mutable_list:RType.PositionPacket.velocity)
  return _internal_mutable_velocity();
}

// bool has_velocity = 4;
inline void PositionPacket::clear_has_velocity() {
  has_velocity_ = false;
}
inline bool PositionPacket::_internal_has_velocity() const {
  return has_velocity_;
}
inline bool PositionPacket::has_velocity() const {
  // @@protoc_insertion_point(field_get:RType.PositionPacket.has_velocity)
  return _internal_has_velocity();
}
inline void PositionPacket::_internal_set_has_velocity(bool value) {
  
  has_velocity_ = value;
}
inline void PositionPacket::set_has_velocity(bool value) {
  _internal_set_has_velocity(value);
  // @@protoc_insertion_point(field_set:RType.PositionPacket.has_velocity)
}

// -------------------------------------------------------------------

// EffectPacket

// uint32 playerId = 1;
inline void EffectPacket::clear_playerid() {
  playerid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EffectPacket::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EffectPacket::playerid() const {
  // @@protoc_insertion_point(field_get:RType.EffectPacket.playerId)
  return _internal_playerid();
}
inline void EffectPacket::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  playerid_ = value;
}
inline void EffectPacket::set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:RType.EffectPacket.playerId)
}

// .RType.EffectPacket.EffectType type = 2;
inline void EffectPacket::clear_type() {
  type_ = 0;
}
inline ::RType::EffectPacket_EffectType EffectPacket::_internal_type() const {
  return static_cast< ::RType::EffectPacket_EffectType >(type_);
}
inline ::RType::EffectPacket_EffectType EffectPacket::type() const {
  // @@protoc_insertion_point(field_get:RType.EffectPacket.type)
  return _internal_type();
}
inline void EffectPacket::_internal_set_type(::RType::EffectPacket_EffectType value) {
  
  type_ = value;
}
inline void EffectPacket::set_type(::RType::EffectPacket_EffectType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:RType.EffectPacket.type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace RType

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::RType::RGamePack_PackType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RType::RGamePack_PackType>() {
  return ::RType::RGamePack_PackType_descriptor();
}
template <> struct is_proto_enum< ::RType::ActionPacket_ActionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RType::ActionPacket_ActionType>() {
  return ::RType::ActionPacket_ActionType_descriptor();
}
template <> struct is_proto_enum< ::RType::LoadPacket_EntityType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RType::LoadPacket_EntityType>() {
  return ::RType::LoadPacket_EntityType_descriptor();
}
template <> struct is_proto_enum< ::RType::EffectPacket_EffectType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RType::EffectPacket_EffectType>() {
  return ::RType::EffectPacket_EffectType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_RGamePack_2eproto
