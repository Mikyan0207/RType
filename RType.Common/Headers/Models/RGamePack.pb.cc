// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RGamePack.proto

#include "RGamePack.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_RGamePack_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActionPacket_RGamePack_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_RGamePack_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CollidePacket_RGamePack_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_RGamePack_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DestroyPacket_RGamePack_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_RGamePack_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EffectPacket_RGamePack_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_RGamePack_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoadPacket_RGamePack_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_RGamePack_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PositionPacket_RGamePack_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_RGamePack_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector2_RGamePack_2eproto;
namespace RType {
class RGamePackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RGamePack> _instance;
  const ::RType::ActionPacket* actioncontent_;
  const ::RType::CollidePacket* collidepacket_;
  const ::RType::LoadPacket* loadcontent_;
  const ::RType::DestroyPacket* destroycontent_;
  const ::RType::PositionPacket* positioncontent_;
  const ::RType::EffectPacket* effectcontent_;
} _RGamePack_default_instance_;
class ActionPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActionPacket> _instance;
  ::PROTOBUF_NAMESPACE_ID::uint64 shootlevel_;
} _ActionPacket_default_instance_;
class CollidePacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CollidePacket> _instance;
} _CollidePacket_default_instance_;
class Vector2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vector2> _instance;
} _Vector2_default_instance_;
class LoadPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadPacket> _instance;
} _LoadPacket_default_instance_;
class DestroyPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DestroyPacket> _instance;
} _DestroyPacket_default_instance_;
class PositionPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PositionPacket> _instance;
} _PositionPacket_default_instance_;
class EffectPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EffectPacket> _instance;
} _EffectPacket_default_instance_;
}  // namespace RType
static void InitDefaultsscc_info_ActionPacket_RGamePack_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RType::_ActionPacket_default_instance_;
    new (ptr) ::RType::ActionPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RType::ActionPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActionPacket_RGamePack_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ActionPacket_RGamePack_2eproto}, {}};

static void InitDefaultsscc_info_CollidePacket_RGamePack_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RType::_CollidePacket_default_instance_;
    new (ptr) ::RType::CollidePacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RType::CollidePacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CollidePacket_RGamePack_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CollidePacket_RGamePack_2eproto}, {}};

static void InitDefaultsscc_info_DestroyPacket_RGamePack_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RType::_DestroyPacket_default_instance_;
    new (ptr) ::RType::DestroyPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RType::DestroyPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DestroyPacket_RGamePack_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DestroyPacket_RGamePack_2eproto}, {}};

static void InitDefaultsscc_info_EffectPacket_RGamePack_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RType::_EffectPacket_default_instance_;
    new (ptr) ::RType::EffectPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RType::EffectPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EffectPacket_RGamePack_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EffectPacket_RGamePack_2eproto}, {}};

static void InitDefaultsscc_info_LoadPacket_RGamePack_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RType::_LoadPacket_default_instance_;
    new (ptr) ::RType::LoadPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RType::LoadPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoadPacket_RGamePack_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LoadPacket_RGamePack_2eproto}, {
      &scc_info_Vector2_RGamePack_2eproto.base,}};

static void InitDefaultsscc_info_PositionPacket_RGamePack_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RType::_PositionPacket_default_instance_;
    new (ptr) ::RType::PositionPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RType::PositionPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PositionPacket_RGamePack_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PositionPacket_RGamePack_2eproto}, {
      &scc_info_Vector2_RGamePack_2eproto.base,}};

static void InitDefaultsscc_info_RGamePack_RGamePack_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RType::_RGamePack_default_instance_;
    new (ptr) ::RType::RGamePack();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RType::RGamePack::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_RGamePack_RGamePack_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_RGamePack_RGamePack_2eproto}, {
      &scc_info_ActionPacket_RGamePack_2eproto.base,
      &scc_info_CollidePacket_RGamePack_2eproto.base,
      &scc_info_LoadPacket_RGamePack_2eproto.base,
      &scc_info_DestroyPacket_RGamePack_2eproto.base,
      &scc_info_PositionPacket_RGamePack_2eproto.base,
      &scc_info_EffectPacket_RGamePack_2eproto.base,}};

static void InitDefaultsscc_info_Vector2_RGamePack_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RType::_Vector2_default_instance_;
    new (ptr) ::RType::Vector2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RType::Vector2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector2_RGamePack_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vector2_RGamePack_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_RGamePack_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_RGamePack_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_RGamePack_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_RGamePack_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RType::RGamePack, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::RType::RGamePack, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RType::RGamePack, code_),
  PROTOBUF_FIELD_OFFSET(::RType::RGamePack, playerid_),
  offsetof(::RType::RGamePackDefaultTypeInternal, actioncontent_),
  offsetof(::RType::RGamePackDefaultTypeInternal, collidepacket_),
  offsetof(::RType::RGamePackDefaultTypeInternal, loadcontent_),
  offsetof(::RType::RGamePackDefaultTypeInternal, destroycontent_),
  offsetof(::RType::RGamePackDefaultTypeInternal, positioncontent_),
  offsetof(::RType::RGamePackDefaultTypeInternal, effectcontent_),
  PROTOBUF_FIELD_OFFSET(::RType::RGamePack, uvar_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RType::ActionPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::RType::ActionPacket, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RType::ActionPacket, id_),
  PROTOBUF_FIELD_OFFSET(::RType::ActionPacket, type_),
  offsetof(::RType::ActionPacketDefaultTypeInternal, shootlevel_),
  PROTOBUF_FIELD_OFFSET(::RType::ActionPacket, sLvl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RType::CollidePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RType::CollidePacket, ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RType::Vector2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RType::Vector2, x_),
  PROTOBUF_FIELD_OFFSET(::RType::Vector2, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RType::LoadPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RType::LoadPacket, id_),
  PROTOBUF_FIELD_OFFSET(::RType::LoadPacket, type_),
  PROTOBUF_FIELD_OFFSET(::RType::LoadPacket, filename_),
  PROTOBUF_FIELD_OFFSET(::RType::LoadPacket, position_),
  PROTOBUF_FIELD_OFFSET(::RType::LoadPacket, scale_),
  PROTOBUF_FIELD_OFFSET(::RType::LoadPacket, size_),
  PROTOBUF_FIELD_OFFSET(::RType::LoadPacket, animframeinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RType::DestroyPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RType::DestroyPacket, ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RType::PositionPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RType::PositionPacket, id_),
  PROTOBUF_FIELD_OFFSET(::RType::PositionPacket, position_),
  PROTOBUF_FIELD_OFFSET(::RType::PositionPacket, velocity_),
  PROTOBUF_FIELD_OFFSET(::RType::PositionPacket, has_velocity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RType::EffectPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RType::EffectPacket, playerid_),
  PROTOBUF_FIELD_OFFSET(::RType::EffectPacket, type_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::RType::RGamePack)},
  { 14, -1, sizeof(::RType::ActionPacket)},
  { 23, -1, sizeof(::RType::CollidePacket)},
  { 29, -1, sizeof(::RType::Vector2)},
  { 36, -1, sizeof(::RType::LoadPacket)},
  { 48, -1, sizeof(::RType::DestroyPacket)},
  { 54, -1, sizeof(::RType::PositionPacket)},
  { 63, -1, sizeof(::RType::EffectPacket)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RType::_RGamePack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RType::_ActionPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RType::_CollidePacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RType::_Vector2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RType::_LoadPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RType::_DestroyPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RType::_PositionPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RType::_EffectPacket_default_instance_),
};

const char descriptor_table_protodef_RGamePack_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017RGamePack.proto\022\005RType\"\325\003\n\tRGamePack\022\'"
  "\n\004code\030\001 \001(\0162\031.RType.RGamePack.PackType\022"
  "\020\n\010playerId\030\002 \001(\r\022,\n\ractionContent\030\003 \001(\013"
  "2\023.RType.ActionPacketH\000\022-\n\rcollidePacket"
  "\030\004 \001(\0132\024.RType.CollidePacketH\000\022(\n\013loadCo"
  "ntent\030\005 \001(\0132\021.RType.LoadPacketH\000\022.\n\016dest"
  "royContent\030\006 \001(\0132\024.RType.DestroyPacketH\000"
  "\0220\n\017positionContent\030\007 \001(\0132\025.RType.Positi"
  "onPacketH\000\022,\n\reffectContent\030\010 \001(\0132\023.RTyp"
  "e.EffectPacketH\000\"n\n\010PackType\022\010\n\004PING\020\000\022\n"
  "\n\006ACTION\020\001\022\r\n\tCOLLISION\020\002\022\010\n\004LOAD\020(\022\013\n\007D"
  "ESTROY\020)\022\014\n\010POSITION\020*\022\n\n\006EFFECT\020+\022\014\n\010EN"
  "D_GAME\020,B\006\n\004uvar\"\246\001\n\014ActionPacket\022\n\n\002Id\030"
  "\001 \001(\r\022,\n\004type\030\002 \001(\0162\036.RType.ActionPacket"
  ".ActionType\022\024\n\nshootLevel\030\003 \001(\004H\000\">\n\nAct"
  "ionType\022\006\n\002UP\020\000\022\010\n\004DOWN\020\001\022\010\n\004LEFT\020\002\022\t\n\005R"
  "IGHT\020\003\022\t\n\005SHOOT\020\004B\006\n\004sLvl\" \n\rCollidePack"
  "et\022\017\n\003Ids\030\001 \003(\004B\002\020\001\"\037\n\007Vector2\022\t\n\001X\030\001 \001("
  "\001\022\t\n\001Y\030\002 \001(\001\"\272\002\n\nLoadPacket\022\n\n\002Id\030\001 \001(\r\022"
  "*\n\004type\030\002 \001(\0162\034.RType.LoadPacket.EntityT"
  "ype\022\020\n\010fileName\030\003 \001(\t\022 \n\010position\030\004 \001(\0132"
  "\016.RType.Vector2\022\035\n\005scale\030\005 \001(\0132\016.RType.V"
  "ector2\022\034\n\004size\030\006 \001(\0132\016.RType.Vector2\022%\n\r"
  "animFrameInfo\030\007 \001(\0132\016.RType.Vector2\"\\\n\nE"
  "ntityType\022\n\n\006PLAYER\020\000\022\t\n\005ENEMY\020\001\022\010\n\004ALLY"
  "\020\002\022\013\n\007POWERUP\020\003\022\016\n\nBASIC_SHOT\020\004\022\020\n\014ENEMY"
  "_BULLET\020\005\" \n\rDestroyPacket\022\017\n\003Ids\030\001 \003(\rB"
  "\002\020\001\"j\n\016PositionPacket\022\016\n\002Id\030\001 \003(\rB\002\020\001\022 \n"
  "\010position\030\002 \003(\0132\016.RType.Vector2\022\020\n\010veloc"
  "ity\030\003 \003(\005\022\024\n\014has_velocity\030\004 \001(\010\"\216\001\n\014Effe"
  "ctPacket\022\020\n\010playerId\030\001 \001(\r\022,\n\004type\030\002 \001(\016"
  "2\036.RType.EffectPacket.EffectType\">\n\nEffe"
  "ctType\022\t\n\005SPEED\020\000\022\017\n\013ATTACKSPEED\020\001\022\n\n\006SH"
  "IELD\020\002\022\010\n\004LIFE\020\003B\002H\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_RGamePack_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_RGamePack_2eproto_sccs[8] = {
  &scc_info_ActionPacket_RGamePack_2eproto.base,
  &scc_info_CollidePacket_RGamePack_2eproto.base,
  &scc_info_DestroyPacket_RGamePack_2eproto.base,
  &scc_info_EffectPacket_RGamePack_2eproto.base,
  &scc_info_LoadPacket_RGamePack_2eproto.base,
  &scc_info_PositionPacket_RGamePack_2eproto.base,
  &scc_info_RGamePack_RGamePack_2eproto.base,
  &scc_info_Vector2_RGamePack_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_RGamePack_2eproto_once;
static bool descriptor_table_RGamePack_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RGamePack_2eproto = {
  &descriptor_table_RGamePack_2eproto_initialized, descriptor_table_protodef_RGamePack_2eproto, "RGamePack.proto", 1348,
  &descriptor_table_RGamePack_2eproto_once, descriptor_table_RGamePack_2eproto_sccs, descriptor_table_RGamePack_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_RGamePack_2eproto::offsets,
  file_level_metadata_RGamePack_2eproto, 8, file_level_enum_descriptors_RGamePack_2eproto, file_level_service_descriptors_RGamePack_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_RGamePack_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_RGamePack_2eproto), true);
namespace RType {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RGamePack_PackType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_RGamePack_2eproto);
  return file_level_enum_descriptors_RGamePack_2eproto[0];
}
bool RGamePack_PackType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RGamePack_PackType RGamePack::PING;
constexpr RGamePack_PackType RGamePack::ACTION;
constexpr RGamePack_PackType RGamePack::COLLISION;
constexpr RGamePack_PackType RGamePack::LOAD;
constexpr RGamePack_PackType RGamePack::DESTROY;
constexpr RGamePack_PackType RGamePack::POSITION;
constexpr RGamePack_PackType RGamePack::EFFECT;
constexpr RGamePack_PackType RGamePack::END_GAME;
constexpr RGamePack_PackType RGamePack::PackType_MIN;
constexpr RGamePack_PackType RGamePack::PackType_MAX;
constexpr int RGamePack::PackType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActionPacket_ActionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_RGamePack_2eproto);
  return file_level_enum_descriptors_RGamePack_2eproto[1];
}
bool ActionPacket_ActionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ActionPacket_ActionType ActionPacket::UP;
constexpr ActionPacket_ActionType ActionPacket::DOWN;
constexpr ActionPacket_ActionType ActionPacket::LEFT;
constexpr ActionPacket_ActionType ActionPacket::RIGHT;
constexpr ActionPacket_ActionType ActionPacket::SHOOT;
constexpr ActionPacket_ActionType ActionPacket::ActionType_MIN;
constexpr ActionPacket_ActionType ActionPacket::ActionType_MAX;
constexpr int ActionPacket::ActionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoadPacket_EntityType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_RGamePack_2eproto);
  return file_level_enum_descriptors_RGamePack_2eproto[2];
}
bool LoadPacket_EntityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LoadPacket_EntityType LoadPacket::PLAYER;
constexpr LoadPacket_EntityType LoadPacket::ENEMY;
constexpr LoadPacket_EntityType LoadPacket::ALLY;
constexpr LoadPacket_EntityType LoadPacket::POWERUP;
constexpr LoadPacket_EntityType LoadPacket::BASIC_SHOT;
constexpr LoadPacket_EntityType LoadPacket::ENEMY_BULLET;
constexpr LoadPacket_EntityType LoadPacket::EntityType_MIN;
constexpr LoadPacket_EntityType LoadPacket::EntityType_MAX;
constexpr int LoadPacket::EntityType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EffectPacket_EffectType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_RGamePack_2eproto);
  return file_level_enum_descriptors_RGamePack_2eproto[3];
}
bool EffectPacket_EffectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr EffectPacket_EffectType EffectPacket::SPEED;
constexpr EffectPacket_EffectType EffectPacket::ATTACKSPEED;
constexpr EffectPacket_EffectType EffectPacket::SHIELD;
constexpr EffectPacket_EffectType EffectPacket::LIFE;
constexpr EffectPacket_EffectType EffectPacket::EffectType_MIN;
constexpr EffectPacket_EffectType EffectPacket::EffectType_MAX;
constexpr int EffectPacket::EffectType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void RGamePack::InitAsDefaultInstance() {
  ::RType::_RGamePack_default_instance_.actioncontent_ = const_cast< ::RType::ActionPacket*>(
      ::RType::ActionPacket::internal_default_instance());
  ::RType::_RGamePack_default_instance_.collidepacket_ = const_cast< ::RType::CollidePacket*>(
      ::RType::CollidePacket::internal_default_instance());
  ::RType::_RGamePack_default_instance_.loadcontent_ = const_cast< ::RType::LoadPacket*>(
      ::RType::LoadPacket::internal_default_instance());
  ::RType::_RGamePack_default_instance_.destroycontent_ = const_cast< ::RType::DestroyPacket*>(
      ::RType::DestroyPacket::internal_default_instance());
  ::RType::_RGamePack_default_instance_.positioncontent_ = const_cast< ::RType::PositionPacket*>(
      ::RType::PositionPacket::internal_default_instance());
  ::RType::_RGamePack_default_instance_.effectcontent_ = const_cast< ::RType::EffectPacket*>(
      ::RType::EffectPacket::internal_default_instance());
}
class RGamePack::_Internal {
 public:
  static const ::RType::ActionPacket& actioncontent(const RGamePack* msg);
  static const ::RType::CollidePacket& collidepacket(const RGamePack* msg);
  static const ::RType::LoadPacket& loadcontent(const RGamePack* msg);
  static const ::RType::DestroyPacket& destroycontent(const RGamePack* msg);
  static const ::RType::PositionPacket& positioncontent(const RGamePack* msg);
  static const ::RType::EffectPacket& effectcontent(const RGamePack* msg);
};

const ::RType::ActionPacket&
RGamePack::_Internal::actioncontent(const RGamePack* msg) {
  return *msg->uvar_.actioncontent_;
}
const ::RType::CollidePacket&
RGamePack::_Internal::collidepacket(const RGamePack* msg) {
  return *msg->uvar_.collidepacket_;
}
const ::RType::LoadPacket&
RGamePack::_Internal::loadcontent(const RGamePack* msg) {
  return *msg->uvar_.loadcontent_;
}
const ::RType::DestroyPacket&
RGamePack::_Internal::destroycontent(const RGamePack* msg) {
  return *msg->uvar_.destroycontent_;
}
const ::RType::PositionPacket&
RGamePack::_Internal::positioncontent(const RGamePack* msg) {
  return *msg->uvar_.positioncontent_;
}
const ::RType::EffectPacket&
RGamePack::_Internal::effectcontent(const RGamePack* msg) {
  return *msg->uvar_.effectcontent_;
}
void RGamePack::set_allocated_actioncontent(::RType::ActionPacket* actioncontent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_uvar();
  if (actioncontent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      actioncontent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actioncontent, submessage_arena);
    }
    set_has_actioncontent();
    uvar_.actioncontent_ = actioncontent;
  }
  // @@protoc_insertion_point(field_set_allocated:RType.RGamePack.actionContent)
}
void RGamePack::set_allocated_collidepacket(::RType::CollidePacket* collidepacket) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_uvar();
  if (collidepacket) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      collidepacket = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, collidepacket, submessage_arena);
    }
    set_has_collidepacket();
    uvar_.collidepacket_ = collidepacket;
  }
  // @@protoc_insertion_point(field_set_allocated:RType.RGamePack.collidePacket)
}
void RGamePack::set_allocated_loadcontent(::RType::LoadPacket* loadcontent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_uvar();
  if (loadcontent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      loadcontent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loadcontent, submessage_arena);
    }
    set_has_loadcontent();
    uvar_.loadcontent_ = loadcontent;
  }
  // @@protoc_insertion_point(field_set_allocated:RType.RGamePack.loadContent)
}
void RGamePack::set_allocated_destroycontent(::RType::DestroyPacket* destroycontent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_uvar();
  if (destroycontent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      destroycontent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destroycontent, submessage_arena);
    }
    set_has_destroycontent();
    uvar_.destroycontent_ = destroycontent;
  }
  // @@protoc_insertion_point(field_set_allocated:RType.RGamePack.destroyContent)
}
void RGamePack::set_allocated_positioncontent(::RType::PositionPacket* positioncontent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_uvar();
  if (positioncontent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      positioncontent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, positioncontent, submessage_arena);
    }
    set_has_positioncontent();
    uvar_.positioncontent_ = positioncontent;
  }
  // @@protoc_insertion_point(field_set_allocated:RType.RGamePack.positionContent)
}
void RGamePack::set_allocated_effectcontent(::RType::EffectPacket* effectcontent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_uvar();
  if (effectcontent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      effectcontent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, effectcontent, submessage_arena);
    }
    set_has_effectcontent();
    uvar_.effectcontent_ = effectcontent;
  }
  // @@protoc_insertion_point(field_set_allocated:RType.RGamePack.effectContent)
}
RGamePack::RGamePack()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RType.RGamePack)
}
RGamePack::RGamePack(const RGamePack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&code_)) + sizeof(playerid_));
  clear_has_uvar();
  switch (from.uvar_case()) {
    case kActionContent: {
      _internal_mutable_actioncontent()->::RType::ActionPacket::MergeFrom(from._internal_actioncontent());
      break;
    }
    case kCollidePacket: {
      _internal_mutable_collidepacket()->::RType::CollidePacket::MergeFrom(from._internal_collidepacket());
      break;
    }
    case kLoadContent: {
      _internal_mutable_loadcontent()->::RType::LoadPacket::MergeFrom(from._internal_loadcontent());
      break;
    }
    case kDestroyContent: {
      _internal_mutable_destroycontent()->::RType::DestroyPacket::MergeFrom(from._internal_destroycontent());
      break;
    }
    case kPositionContent: {
      _internal_mutable_positioncontent()->::RType::PositionPacket::MergeFrom(from._internal_positioncontent());
      break;
    }
    case kEffectContent: {
      _internal_mutable_effectcontent()->::RType::EffectPacket::MergeFrom(from._internal_effectcontent());
      break;
    }
    case UVAR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:RType.RGamePack)
}

void RGamePack::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RGamePack_RGamePack_2eproto.base);
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&code_)) + sizeof(playerid_));
  clear_has_uvar();
}

RGamePack::~RGamePack() {
  // @@protoc_insertion_point(destructor:RType.RGamePack)
  SharedDtor();
}

void RGamePack::SharedDtor() {
  if (has_uvar()) {
    clear_uvar();
  }
}

void RGamePack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RGamePack& RGamePack::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RGamePack_RGamePack_2eproto.base);
  return *internal_default_instance();
}


void RGamePack::clear_uvar() {
// @@protoc_insertion_point(one_of_clear_start:RType.RGamePack)
  switch (uvar_case()) {
    case kActionContent: {
      delete uvar_.actioncontent_;
      break;
    }
    case kCollidePacket: {
      delete uvar_.collidepacket_;
      break;
    }
    case kLoadContent: {
      delete uvar_.loadcontent_;
      break;
    }
    case kDestroyContent: {
      delete uvar_.destroycontent_;
      break;
    }
    case kPositionContent: {
      delete uvar_.positioncontent_;
      break;
    }
    case kEffectContent: {
      delete uvar_.effectcontent_;
      break;
    }
    case UVAR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = UVAR_NOT_SET;
}


void RGamePack::Clear() {
// @@protoc_insertion_point(message_clear_start:RType.RGamePack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&code_)) + sizeof(playerid_));
  clear_uvar();
  _internal_metadata_.Clear();
}

const char* RGamePack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RType.RGamePack.PackType code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::RType::RGamePack_PackType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 playerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RType.ActionPacket actionContent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_actioncontent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RType.CollidePacket collidePacket = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_collidepacket(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RType.LoadPacket loadContent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_loadcontent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RType.DestroyPacket destroyContent = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_destroycontent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RType.PositionPacket positionContent = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_positioncontent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RType.EffectPacket effectContent = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_effectcontent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RGamePack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RType.RGamePack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RType.RGamePack.PackType code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // uint32 playerId = 2;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_playerid(), target);
  }

  // .RType.ActionPacket actionContent = 3;
  if (_internal_has_actioncontent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::actioncontent(this), target, stream);
  }

  // .RType.CollidePacket collidePacket = 4;
  if (_internal_has_collidepacket()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::collidepacket(this), target, stream);
  }

  // .RType.LoadPacket loadContent = 5;
  if (_internal_has_loadcontent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::loadcontent(this), target, stream);
  }

  // .RType.DestroyPacket destroyContent = 6;
  if (_internal_has_destroycontent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::destroycontent(this), target, stream);
  }

  // .RType.PositionPacket positionContent = 7;
  if (_internal_has_positioncontent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::positioncontent(this), target, stream);
  }

  // .RType.EffectPacket effectContent = 8;
  if (_internal_has_effectcontent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::effectcontent(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RType.RGamePack)
  return target;
}

size_t RGamePack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RType.RGamePack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .RType.RGamePack.PackType code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code());
  }

  // uint32 playerId = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerid());
  }

  switch (uvar_case()) {
    // .RType.ActionPacket actionContent = 3;
    case kActionContent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *uvar_.actioncontent_);
      break;
    }
    // .RType.CollidePacket collidePacket = 4;
    case kCollidePacket: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *uvar_.collidepacket_);
      break;
    }
    // .RType.LoadPacket loadContent = 5;
    case kLoadContent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *uvar_.loadcontent_);
      break;
    }
    // .RType.DestroyPacket destroyContent = 6;
    case kDestroyContent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *uvar_.destroycontent_);
      break;
    }
    // .RType.PositionPacket positionContent = 7;
    case kPositionContent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *uvar_.positioncontent_);
      break;
    }
    // .RType.EffectPacket effectContent = 8;
    case kEffectContent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *uvar_.effectcontent_);
      break;
    }
    case UVAR_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RGamePack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RType.RGamePack)
  GOOGLE_DCHECK_NE(&from, this);
  const RGamePack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RGamePack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RType.RGamePack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RType.RGamePack)
    MergeFrom(*source);
  }
}

void RGamePack::MergeFrom(const RGamePack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RType.RGamePack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  switch (from.uvar_case()) {
    case kActionContent: {
      _internal_mutable_actioncontent()->::RType::ActionPacket::MergeFrom(from._internal_actioncontent());
      break;
    }
    case kCollidePacket: {
      _internal_mutable_collidepacket()->::RType::CollidePacket::MergeFrom(from._internal_collidepacket());
      break;
    }
    case kLoadContent: {
      _internal_mutable_loadcontent()->::RType::LoadPacket::MergeFrom(from._internal_loadcontent());
      break;
    }
    case kDestroyContent: {
      _internal_mutable_destroycontent()->::RType::DestroyPacket::MergeFrom(from._internal_destroycontent());
      break;
    }
    case kPositionContent: {
      _internal_mutable_positioncontent()->::RType::PositionPacket::MergeFrom(from._internal_positioncontent());
      break;
    }
    case kEffectContent: {
      _internal_mutable_effectcontent()->::RType::EffectPacket::MergeFrom(from._internal_effectcontent());
      break;
    }
    case UVAR_NOT_SET: {
      break;
    }
  }
}

void RGamePack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RType.RGamePack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RGamePack::CopyFrom(const RGamePack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RType.RGamePack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RGamePack::IsInitialized() const {
  return true;
}

void RGamePack::InternalSwap(RGamePack* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(code_, other->code_);
  swap(playerid_, other->playerid_);
  swap(uvar_, other->uvar_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RGamePack::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActionPacket::InitAsDefaultInstance() {
  ::RType::_ActionPacket_default_instance_.shootlevel_ = PROTOBUF_ULONGLONG(0);
}
class ActionPacket::_Internal {
 public:
};

ActionPacket::ActionPacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RType.ActionPacket)
}
ActionPacket::ActionPacket(const ActionPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  clear_has_sLvl();
  switch (from.sLvl_case()) {
    case kShootLevel: {
      _internal_set_shootlevel(from._internal_shootlevel());
      break;
    }
    case SLVL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:RType.ActionPacket)
}

void ActionPacket::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
  clear_has_sLvl();
}

ActionPacket::~ActionPacket() {
  // @@protoc_insertion_point(destructor:RType.ActionPacket)
  SharedDtor();
}

void ActionPacket::SharedDtor() {
  if (has_sLvl()) {
    clear_sLvl();
  }
}

void ActionPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActionPacket& ActionPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActionPacket_RGamePack_2eproto.base);
  return *internal_default_instance();
}


void ActionPacket::clear_sLvl() {
// @@protoc_insertion_point(one_of_clear_start:RType.ActionPacket)
  switch (sLvl_case()) {
    case kShootLevel: {
      // No need to clear
      break;
    }
    case SLVL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SLVL_NOT_SET;
}


void ActionPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:RType.ActionPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
  clear_sLvl();
  _internal_metadata_.Clear();
}

const char* ActionPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RType.ActionPacket.ActionType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::RType::ActionPacket_ActionType>(val));
        } else goto handle_unusual;
        continue;
      // uint64 shootLevel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_shootlevel(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActionPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RType.ActionPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // .RType.ActionPacket.ActionType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // uint64 shootLevel = 3;
  if (_internal_has_shootlevel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_shootlevel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RType.ActionPacket)
  return target;
}

size_t ActionPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RType.ActionPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // .RType.ActionPacket.ActionType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (sLvl_case()) {
    // uint64 shootLevel = 3;
    case kShootLevel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_shootlevel());
      break;
    }
    case SLVL_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RType.ActionPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActionPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RType.ActionPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RType.ActionPacket)
    MergeFrom(*source);
  }
}

void ActionPacket::MergeFrom(const ActionPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RType.ActionPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  switch (from.sLvl_case()) {
    case kShootLevel: {
      _internal_set_shootlevel(from._internal_shootlevel());
      break;
    }
    case SLVL_NOT_SET: {
      break;
    }
  }
}

void ActionPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RType.ActionPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionPacket::CopyFrom(const ActionPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RType.ActionPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionPacket::IsInitialized() const {
  return true;
}

void ActionPacket::InternalSwap(ActionPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(sLvl_, other->sLvl_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CollidePacket::InitAsDefaultInstance() {
}
class CollidePacket::_Internal {
 public:
};

CollidePacket::CollidePacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RType.CollidePacket)
}
CollidePacket::CollidePacket(const CollidePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:RType.CollidePacket)
}

void CollidePacket::SharedCtor() {
}

CollidePacket::~CollidePacket() {
  // @@protoc_insertion_point(destructor:RType.CollidePacket)
  SharedDtor();
}

void CollidePacket::SharedDtor() {
}

void CollidePacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CollidePacket& CollidePacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CollidePacket_RGamePack_2eproto.base);
  return *internal_default_instance();
}


void CollidePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:RType.CollidePacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  _internal_metadata_.Clear();
}

const char* CollidePacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 Ids = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CollidePacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RType.CollidePacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 Ids = 1 [packed = true];
  {
    int byte_size = _ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RType.CollidePacket)
  return target;
}

size_t CollidePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RType.CollidePacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 Ids = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CollidePacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RType.CollidePacket)
  GOOGLE_DCHECK_NE(&from, this);
  const CollidePacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CollidePacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RType.CollidePacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RType.CollidePacket)
    MergeFrom(*source);
  }
}

void CollidePacket::MergeFrom(const CollidePacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RType.CollidePacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
}

void CollidePacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RType.CollidePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollidePacket::CopyFrom(const CollidePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RType.CollidePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollidePacket::IsInitialized() const {
  return true;
}

void CollidePacket::InternalSwap(CollidePacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CollidePacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Vector2::InitAsDefaultInstance() {
}
class Vector2::_Internal {
 public:
};

Vector2::Vector2()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RType.Vector2)
}
Vector2::Vector2(const Vector2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:RType.Vector2)
}

void Vector2::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Vector2::~Vector2() {
  // @@protoc_insertion_point(destructor:RType.Vector2)
  SharedDtor();
}

void Vector2::SharedDtor() {
}

void Vector2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vector2& Vector2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vector2_RGamePack_2eproto.base);
  return *internal_default_instance();
}


void Vector2::Clear() {
// @@protoc_insertion_point(message_clear_start:RType.Vector2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

const char* Vector2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double X = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double Y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vector2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RType.Vector2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double X = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double Y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RType.Vector2)
  return target;
}

size_t Vector2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RType.Vector2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double X = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double Y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vector2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RType.Vector2)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vector2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RType.Vector2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RType.Vector2)
    MergeFrom(*source);
  }
}

void Vector2::MergeFrom(const Vector2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RType.Vector2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void Vector2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RType.Vector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector2::CopyFrom(const Vector2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RType.Vector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector2::IsInitialized() const {
  return true;
}

void Vector2::InternalSwap(Vector2* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoadPacket::InitAsDefaultInstance() {
  ::RType::_LoadPacket_default_instance_._instance.get_mutable()->position_ = const_cast< ::RType::Vector2*>(
      ::RType::Vector2::internal_default_instance());
  ::RType::_LoadPacket_default_instance_._instance.get_mutable()->scale_ = const_cast< ::RType::Vector2*>(
      ::RType::Vector2::internal_default_instance());
  ::RType::_LoadPacket_default_instance_._instance.get_mutable()->size_ = const_cast< ::RType::Vector2*>(
      ::RType::Vector2::internal_default_instance());
  ::RType::_LoadPacket_default_instance_._instance.get_mutable()->animframeinfo_ = const_cast< ::RType::Vector2*>(
      ::RType::Vector2::internal_default_instance());
}
class LoadPacket::_Internal {
 public:
  static const ::RType::Vector2& position(const LoadPacket* msg);
  static const ::RType::Vector2& scale(const LoadPacket* msg);
  static const ::RType::Vector2& size(const LoadPacket* msg);
  static const ::RType::Vector2& animframeinfo(const LoadPacket* msg);
};

const ::RType::Vector2&
LoadPacket::_Internal::position(const LoadPacket* msg) {
  return *msg->position_;
}
const ::RType::Vector2&
LoadPacket::_Internal::scale(const LoadPacket* msg) {
  return *msg->scale_;
}
const ::RType::Vector2&
LoadPacket::_Internal::size(const LoadPacket* msg) {
  return *msg->size_;
}
const ::RType::Vector2&
LoadPacket::_Internal::animframeinfo(const LoadPacket* msg) {
  return *msg->animframeinfo_;
}
LoadPacket::LoadPacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RType.LoadPacket)
}
LoadPacket::LoadPacket(const LoadPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from._internal_has_position()) {
    position_ = new ::RType::Vector2(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_scale()) {
    scale_ = new ::RType::Vector2(*from.scale_);
  } else {
    scale_ = nullptr;
  }
  if (from._internal_has_size()) {
    size_ = new ::RType::Vector2(*from.size_);
  } else {
    size_ = nullptr;
  }
  if (from._internal_has_animframeinfo()) {
    animframeinfo_ = new ::RType::Vector2(*from.animframeinfo_);
  } else {
    animframeinfo_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:RType.LoadPacket)
}

void LoadPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadPacket_RGamePack_2eproto.base);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&position_)) + sizeof(type_));
}

LoadPacket::~LoadPacket() {
  // @@protoc_insertion_point(destructor:RType.LoadPacket)
  SharedDtor();
}

void LoadPacket::SharedDtor() {
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete scale_;
  if (this != internal_default_instance()) delete size_;
  if (this != internal_default_instance()) delete animframeinfo_;
}

void LoadPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadPacket& LoadPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadPacket_RGamePack_2eproto.base);
  return *internal_default_instance();
}


void LoadPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:RType.LoadPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && scale_ != nullptr) {
    delete scale_;
  }
  scale_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && animframeinfo_ != nullptr) {
    delete animframeinfo_;
  }
  animframeinfo_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

const char* LoadPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RType.LoadPacket.EntityType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::RType::LoadPacket_EntityType>(val));
        } else goto handle_unusual;
        continue;
      // string fileName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RType.LoadPacket.fileName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RType.Vector2 position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RType.Vector2 scale = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_scale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RType.Vector2 size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RType.Vector2 animFrameInfo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_animframeinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RType.LoadPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // .RType.LoadPacket.EntityType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // string fileName = 3;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RType.LoadPacket.fileName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_filename(), target);
  }

  // .RType.Vector2 position = 4;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::position(this), target, stream);
  }

  // .RType.Vector2 scale = 5;
  if (this->has_scale()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::scale(this), target, stream);
  }

  // .RType.Vector2 size = 6;
  if (this->has_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::size(this), target, stream);
  }

  // .RType.Vector2 animFrameInfo = 7;
  if (this->has_animframeinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::animframeinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RType.LoadPacket)
  return target;
}

size_t LoadPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RType.LoadPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string fileName = 3;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // .RType.Vector2 position = 4;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .RType.Vector2 scale = 5;
  if (this->has_scale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scale_);
  }

  // .RType.Vector2 size = 6;
  if (this->has_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_);
  }

  // .RType.Vector2 animFrameInfo = 7;
  if (this->has_animframeinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *animframeinfo_);
  }

  // uint32 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // .RType.LoadPacket.EntityType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RType.LoadPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RType.LoadPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RType.LoadPacket)
    MergeFrom(*source);
  }
}

void LoadPacket::MergeFrom(const LoadPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RType.LoadPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.has_position()) {
    _internal_mutable_position()->::RType::Vector2::MergeFrom(from._internal_position());
  }
  if (from.has_scale()) {
    _internal_mutable_scale()->::RType::Vector2::MergeFrom(from._internal_scale());
  }
  if (from.has_size()) {
    _internal_mutable_size()->::RType::Vector2::MergeFrom(from._internal_size());
  }
  if (from.has_animframeinfo()) {
    _internal_mutable_animframeinfo()->::RType::Vector2::MergeFrom(from._internal_animframeinfo());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void LoadPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RType.LoadPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadPacket::CopyFrom(const LoadPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RType.LoadPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadPacket::IsInitialized() const {
  return true;
}

void LoadPacket::InternalSwap(LoadPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(position_, other->position_);
  swap(scale_, other->scale_);
  swap(size_, other->size_);
  swap(animframeinfo_, other->animframeinfo_);
  swap(id_, other->id_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DestroyPacket::InitAsDefaultInstance() {
}
class DestroyPacket::_Internal {
 public:
};

DestroyPacket::DestroyPacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RType.DestroyPacket)
}
DestroyPacket::DestroyPacket(const DestroyPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:RType.DestroyPacket)
}

void DestroyPacket::SharedCtor() {
}

DestroyPacket::~DestroyPacket() {
  // @@protoc_insertion_point(destructor:RType.DestroyPacket)
  SharedDtor();
}

void DestroyPacket::SharedDtor() {
}

void DestroyPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DestroyPacket& DestroyPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DestroyPacket_RGamePack_2eproto.base);
  return *internal_default_instance();
}


void DestroyPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:RType.DestroyPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  _internal_metadata_.Clear();
}

const char* DestroyPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 Ids = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DestroyPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RType.DestroyPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 Ids = 1 [packed = true];
  {
    int byte_size = _ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RType.DestroyPacket)
  return target;
}

size_t DestroyPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RType.DestroyPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 Ids = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DestroyPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RType.DestroyPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const DestroyPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DestroyPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RType.DestroyPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RType.DestroyPacket)
    MergeFrom(*source);
  }
}

void DestroyPacket::MergeFrom(const DestroyPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RType.DestroyPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
}

void DestroyPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RType.DestroyPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DestroyPacket::CopyFrom(const DestroyPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RType.DestroyPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestroyPacket::IsInitialized() const {
  return true;
}

void DestroyPacket::InternalSwap(DestroyPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DestroyPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PositionPacket::InitAsDefaultInstance() {
}
class PositionPacket::_Internal {
 public:
};

PositionPacket::PositionPacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RType.PositionPacket)
}
PositionPacket::PositionPacket(const PositionPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      id_(from.id_),
      position_(from.position_),
      velocity_(from.velocity_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  has_velocity_ = from.has_velocity_;
  // @@protoc_insertion_point(copy_constructor:RType.PositionPacket)
}

void PositionPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PositionPacket_RGamePack_2eproto.base);
  has_velocity_ = false;
}

PositionPacket::~PositionPacket() {
  // @@protoc_insertion_point(destructor:RType.PositionPacket)
  SharedDtor();
}

void PositionPacket::SharedDtor() {
}

void PositionPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionPacket& PositionPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PositionPacket_RGamePack_2eproto.base);
  return *internal_default_instance();
}


void PositionPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:RType.PositionPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.Clear();
  position_.Clear();
  velocity_.Clear();
  has_velocity_ = false;
  _internal_metadata_.Clear();
}

const char* PositionPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 Id = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .RType.Vector2 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_position(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 velocity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_velocity(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_velocity(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool has_velocity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          has_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RType.PositionPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 Id = 1 [packed = true];
  {
    int byte_size = _id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_id(), byte_size, target);
    }
  }

  // repeated .RType.Vector2 position = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_position_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_position(i), target, stream);
  }

  // repeated int32 velocity = 3;
  {
    int byte_size = _velocity_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_velocity(), byte_size, target);
    }
  }

  // bool has_velocity = 4;
  if (this->has_velocity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_has_velocity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RType.PositionPacket)
  return target;
}

size_t PositionPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RType.PositionPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 Id = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .RType.Vector2 position = 2;
  total_size += 1UL * this->_internal_position_size();
  for (const auto& msg : this->position_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 velocity = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->velocity_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _velocity_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bool has_velocity = 4;
  if (this->has_velocity() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RType.PositionPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PositionPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RType.PositionPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RType.PositionPacket)
    MergeFrom(*source);
  }
}

void PositionPacket::MergeFrom(const PositionPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RType.PositionPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  id_.MergeFrom(from.id_);
  position_.MergeFrom(from.position_);
  velocity_.MergeFrom(from.velocity_);
  if (from.has_velocity() != 0) {
    _internal_set_has_velocity(from._internal_has_velocity());
  }
}

void PositionPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RType.PositionPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionPacket::CopyFrom(const PositionPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RType.PositionPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionPacket::IsInitialized() const {
  return true;
}

void PositionPacket::InternalSwap(PositionPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.InternalSwap(&other->id_);
  position_.InternalSwap(&other->position_);
  velocity_.InternalSwap(&other->velocity_);
  swap(has_velocity_, other->has_velocity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EffectPacket::InitAsDefaultInstance() {
}
class EffectPacket::_Internal {
 public:
};

EffectPacket::EffectPacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RType.EffectPacket)
}
EffectPacket::EffectPacket(const EffectPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:RType.EffectPacket)
}

void EffectPacket::SharedCtor() {
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(type_));
}

EffectPacket::~EffectPacket() {
  // @@protoc_insertion_point(destructor:RType.EffectPacket)
  SharedDtor();
}

void EffectPacket::SharedDtor() {
}

void EffectPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EffectPacket& EffectPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EffectPacket_RGamePack_2eproto.base);
  return *internal_default_instance();
}


void EffectPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:RType.EffectPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

const char* EffectPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RType.EffectPacket.EffectType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::RType::EffectPacket_EffectType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EffectPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RType.EffectPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 playerId = 1;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // .RType.EffectPacket.EffectType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RType.EffectPacket)
  return target;
}

size_t EffectPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RType.EffectPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 playerId = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerid());
  }

  // .RType.EffectPacket.EffectType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EffectPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RType.EffectPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const EffectPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EffectPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RType.EffectPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RType.EffectPacket)
    MergeFrom(*source);
  }
}

void EffectPacket::MergeFrom(const EffectPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RType.EffectPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void EffectPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RType.EffectPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EffectPacket::CopyFrom(const EffectPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RType.EffectPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EffectPacket::IsInitialized() const {
  return true;
}

void EffectPacket::InternalSwap(EffectPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(playerid_, other->playerid_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EffectPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace RType
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RType::RGamePack* Arena::CreateMaybeMessage< ::RType::RGamePack >(Arena* arena) {
  return Arena::CreateInternal< ::RType::RGamePack >(arena);
}
template<> PROTOBUF_NOINLINE ::RType::ActionPacket* Arena::CreateMaybeMessage< ::RType::ActionPacket >(Arena* arena) {
  return Arena::CreateInternal< ::RType::ActionPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::RType::CollidePacket* Arena::CreateMaybeMessage< ::RType::CollidePacket >(Arena* arena) {
  return Arena::CreateInternal< ::RType::CollidePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::RType::Vector2* Arena::CreateMaybeMessage< ::RType::Vector2 >(Arena* arena) {
  return Arena::CreateInternal< ::RType::Vector2 >(arena);
}
template<> PROTOBUF_NOINLINE ::RType::LoadPacket* Arena::CreateMaybeMessage< ::RType::LoadPacket >(Arena* arena) {
  return Arena::CreateInternal< ::RType::LoadPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::RType::DestroyPacket* Arena::CreateMaybeMessage< ::RType::DestroyPacket >(Arena* arena) {
  return Arena::CreateInternal< ::RType::DestroyPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::RType::PositionPacket* Arena::CreateMaybeMessage< ::RType::PositionPacket >(Arena* arena) {
  return Arena::CreateInternal< ::RType::PositionPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::RType::EffectPacket* Arena::CreateMaybeMessage< ::RType::EffectPacket >(Arena* arena) {
  return Arena::CreateInternal< ::RType::EffectPacket >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
