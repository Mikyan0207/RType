// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RTypePack.proto

#include "RTypePack.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_RTypePack_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LobbyPacket_RTypePack_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_RTypePack_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResponsePacket_RTypePack_2eproto;
namespace RType {
class RTypePackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RTypePack> _instance;
  const ::RType::ResponsePacket* responsecontent_;
  const ::RType::LobbyPacket* lobbycontent_;
} _RTypePack_default_instance_;
class ResponsePacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResponsePacket> _instance;
} _ResponsePacket_default_instance_;
class LobbyPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LobbyPacket> _instance;
} _LobbyPacket_default_instance_;
}  // namespace RType
static void InitDefaultsscc_info_LobbyPacket_RTypePack_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RType::_LobbyPacket_default_instance_;
    new (ptr) ::RType::LobbyPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RType::LobbyPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LobbyPacket_RTypePack_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LobbyPacket_RTypePack_2eproto}, {}};

static void InitDefaultsscc_info_RTypePack_RTypePack_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RType::_RTypePack_default_instance_;
    new (ptr) ::RType::RTypePack();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RType::RTypePack::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RTypePack_RTypePack_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RTypePack_RTypePack_2eproto}, {
      &scc_info_ResponsePacket_RTypePack_2eproto.base,
      &scc_info_LobbyPacket_RTypePack_2eproto.base,}};

static void InitDefaultsscc_info_ResponsePacket_RTypePack_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RType::_ResponsePacket_default_instance_;
    new (ptr) ::RType::ResponsePacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RType::ResponsePacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResponsePacket_RTypePack_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResponsePacket_RTypePack_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_RTypePack_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_RTypePack_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_RTypePack_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_RTypePack_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RType::RTypePack, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::RType::RTypePack, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RType::RTypePack, code_),
  PROTOBUF_FIELD_OFFSET(::RType::RTypePack, clientip_),
  PROTOBUF_FIELD_OFFSET(::RType::RTypePack, clientid_),
  offsetof(::RType::RTypePackDefaultTypeInternal, responsecontent_),
  offsetof(::RType::RTypePackDefaultTypeInternal, lobbycontent_),
  PROTOBUF_FIELD_OFFSET(::RType::RTypePack, Packet_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RType::ResponsePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RType::ResponsePacket, code_),
  PROTOBUF_FIELD_OFFSET(::RType::ResponsePacket, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RType::LobbyPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RType::LobbyPacket, playerid_),
  PROTOBUF_FIELD_OFFSET(::RType::LobbyPacket, roomid_),
  PROTOBUF_FIELD_OFFSET(::RType::LobbyPacket, maxplayer_),
  PROTOBUF_FIELD_OFFSET(::RType::LobbyPacket, udp_ip_),
  PROTOBUF_FIELD_OFFSET(::RType::LobbyPacket, port_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::RType::RTypePack)},
  { 11, -1, sizeof(::RType::ResponsePacket)},
  { 18, -1, sizeof(::RType::LobbyPacket)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RType::_RTypePack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RType::_ResponsePacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RType::_LobbyPacket_default_instance_),
};

const char descriptor_table_protodef_RTypePack_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017RTypePack.proto\022\005RType\"\261\003\n\tRTypePack\022\'"
  "\n\004code\030\001 \001(\0162\031.RType.RTypePack.PackType\022"
  "\020\n\010clientip\030\002 \001(\t\022\020\n\010clientId\030\003 \001(\r\0220\n\017R"
  "esponseContent\030\004 \001(\0132\025.RType.ResponsePac"
  "ketH\000\022*\n\014LobbyContent\030\005 \001(\0132\022.RType.Lobb"
  "yPacketH\000\"\356\001\n\010PackType\022\014\n\010RESPONSE\020\000\022\017\n\013"
  "CREATE_ROOM\020\001\022\r\n\tJOIN_ROOM\020\002\022\016\n\nLEAVE_RO"
  "OM\020\003\022\016\n\nSTART_GAME\020\004\022\020\n\014ROOM_CREATED\020\005\022\017"
  "\n\013ROOM_JOINED\020\006\022\026\n\022ROOM_PLAYER_JOINED\020\007\022"
  "\020\n\014ROOM_IS_FULL\020\010\022\r\n\tROOM_LEFT\020\t\022\024\n\020ROOM"
  "_PLAYER_LEFT\020\n\022\n\n\006TRYING\020d\022\007\n\002OK\020\310\001\022\r\n\010N"
  "OTFOUND\020\224\003B\010\n\006Packet\"p\n\016ResponsePacket\022."
  "\n\004Code\030\001 \001(\0162 .RType.ResponsePacket.Acti"
  "onType\022\017\n\007Content\030\002 \001(\t\"\035\n\nActionType\022\006\n"
  "\002OK\020\000\022\007\n\003BAD\020\001\"`\n\013LobbyPacket\022\020\n\010PlayerI"
  "D\030\001 \001(\r\022\016\n\006RoomID\030\002 \001(\t\022\021\n\tMaxPlayer\030\003 \001"
  "(\r\022\016\n\006udp_ip\030\004 \001(\t\022\014\n\004port\030\005 \001(\rB\002H\001b\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_RTypePack_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_RTypePack_2eproto_sccs[3] = {
  &scc_info_LobbyPacket_RTypePack_2eproto.base,
  &scc_info_RTypePack_RTypePack_2eproto.base,
  &scc_info_ResponsePacket_RTypePack_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_RTypePack_2eproto_once;
static bool descriptor_table_RTypePack_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RTypePack_2eproto = {
  &descriptor_table_RTypePack_2eproto_initialized, descriptor_table_protodef_RTypePack_2eproto, "RTypePack.proto", 684,
  &descriptor_table_RTypePack_2eproto_once, descriptor_table_RTypePack_2eproto_sccs, descriptor_table_RTypePack_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_RTypePack_2eproto::offsets,
  file_level_metadata_RTypePack_2eproto, 3, file_level_enum_descriptors_RTypePack_2eproto, file_level_service_descriptors_RTypePack_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_RTypePack_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_RTypePack_2eproto), true);
namespace RType {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RTypePack_PackType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_RTypePack_2eproto);
  return file_level_enum_descriptors_RTypePack_2eproto[0];
}
bool RTypePack_PackType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 100:
    case 200:
    case 404:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RTypePack_PackType RTypePack::RESPONSE;
constexpr RTypePack_PackType RTypePack::CREATE_ROOM;
constexpr RTypePack_PackType RTypePack::JOIN_ROOM;
constexpr RTypePack_PackType RTypePack::LEAVE_ROOM;
constexpr RTypePack_PackType RTypePack::START_GAME;
constexpr RTypePack_PackType RTypePack::ROOM_CREATED;
constexpr RTypePack_PackType RTypePack::ROOM_JOINED;
constexpr RTypePack_PackType RTypePack::ROOM_PLAYER_JOINED;
constexpr RTypePack_PackType RTypePack::ROOM_IS_FULL;
constexpr RTypePack_PackType RTypePack::ROOM_LEFT;
constexpr RTypePack_PackType RTypePack::ROOM_PLAYER_LEFT;
constexpr RTypePack_PackType RTypePack::TRYING;
constexpr RTypePack_PackType RTypePack::OK;
constexpr RTypePack_PackType RTypePack::NOTFOUND;
constexpr RTypePack_PackType RTypePack::PackType_MIN;
constexpr RTypePack_PackType RTypePack::PackType_MAX;
constexpr int RTypePack::PackType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResponsePacket_ActionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_RTypePack_2eproto);
  return file_level_enum_descriptors_RTypePack_2eproto[1];
}
bool ResponsePacket_ActionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ResponsePacket_ActionType ResponsePacket::OK;
constexpr ResponsePacket_ActionType ResponsePacket::BAD;
constexpr ResponsePacket_ActionType ResponsePacket::ActionType_MIN;
constexpr ResponsePacket_ActionType ResponsePacket::ActionType_MAX;
constexpr int ResponsePacket::ActionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void RTypePack::InitAsDefaultInstance() {
  ::RType::_RTypePack_default_instance_.responsecontent_ = const_cast< ::RType::ResponsePacket*>(
      ::RType::ResponsePacket::internal_default_instance());
  ::RType::_RTypePack_default_instance_.lobbycontent_ = const_cast< ::RType::LobbyPacket*>(
      ::RType::LobbyPacket::internal_default_instance());
}
class RTypePack::_Internal {
 public:
  static const ::RType::ResponsePacket& responsecontent(const RTypePack* msg);
  static const ::RType::LobbyPacket& lobbycontent(const RTypePack* msg);
};

const ::RType::ResponsePacket&
RTypePack::_Internal::responsecontent(const RTypePack* msg) {
  return *msg->Packet_.responsecontent_;
}
const ::RType::LobbyPacket&
RTypePack::_Internal::lobbycontent(const RTypePack* msg) {
  return *msg->Packet_.lobbycontent_;
}
void RTypePack::set_allocated_responsecontent(::RType::ResponsePacket* responsecontent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_Packet();
  if (responsecontent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      responsecontent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, responsecontent, submessage_arena);
    }
    set_has_responsecontent();
    Packet_.responsecontent_ = responsecontent;
  }
  // @@protoc_insertion_point(field_set_allocated:RType.RTypePack.ResponseContent)
}
void RTypePack::set_allocated_lobbycontent(::RType::LobbyPacket* lobbycontent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_Packet();
  if (lobbycontent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lobbycontent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lobbycontent, submessage_arena);
    }
    set_has_lobbycontent();
    Packet_.lobbycontent_ = lobbycontent;
  }
  // @@protoc_insertion_point(field_set_allocated:RType.RTypePack.LobbyContent)
}
RTypePack::RTypePack()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RType.RTypePack)
}
RTypePack::RTypePack(const RTypePack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clientip().empty()) {
    clientip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clientip_);
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&clientid_) -
    reinterpret_cast<char*>(&code_)) + sizeof(clientid_));
  clear_has_Packet();
  switch (from.Packet_case()) {
    case kResponseContent: {
      _internal_mutable_responsecontent()->::RType::ResponsePacket::MergeFrom(from._internal_responsecontent());
      break;
    }
    case kLobbyContent: {
      _internal_mutable_lobbycontent()->::RType::LobbyPacket::MergeFrom(from._internal_lobbycontent());
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:RType.RTypePack)
}

void RTypePack::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RTypePack_RTypePack_2eproto.base);
  clientip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clientid_) -
      reinterpret_cast<char*>(&code_)) + sizeof(clientid_));
  clear_has_Packet();
}

RTypePack::~RTypePack() {
  // @@protoc_insertion_point(destructor:RType.RTypePack)
  SharedDtor();
}

void RTypePack::SharedDtor() {
  clientip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_Packet()) {
    clear_Packet();
  }
}

void RTypePack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RTypePack& RTypePack::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RTypePack_RTypePack_2eproto.base);
  return *internal_default_instance();
}


void RTypePack::clear_Packet() {
// @@protoc_insertion_point(one_of_clear_start:RType.RTypePack)
  switch (Packet_case()) {
    case kResponseContent: {
      delete Packet_.responsecontent_;
      break;
    }
    case kLobbyContent: {
      delete Packet_.lobbycontent_;
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PACKET_NOT_SET;
}


void RTypePack::Clear() {
// @@protoc_insertion_point(message_clear_start:RType.RTypePack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clientip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clientid_) -
      reinterpret_cast<char*>(&code_)) + sizeof(clientid_));
  clear_Packet();
  _internal_metadata_.Clear();
}

const char* RTypePack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RType.RTypePack.PackType code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::RType::RTypePack_PackType>(val));
        } else goto handle_unusual;
        continue;
      // string clientip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_clientip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RType.RTypePack.clientip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 clientId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          clientid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RType.ResponsePacket ResponseContent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_responsecontent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RType.LobbyPacket LobbyContent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_lobbycontent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RTypePack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RType.RTypePack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RType.RTypePack.PackType code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // string clientip = 2;
  if (this->clientip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientip().data(), static_cast<int>(this->_internal_clientip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RType.RTypePack.clientip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_clientip(), target);
  }

  // uint32 clientId = 3;
  if (this->clientid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_clientid(), target);
  }

  // .RType.ResponsePacket ResponseContent = 4;
  if (_internal_has_responsecontent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::responsecontent(this), target, stream);
  }

  // .RType.LobbyPacket LobbyContent = 5;
  if (_internal_has_lobbycontent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::lobbycontent(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RType.RTypePack)
  return target;
}

size_t RTypePack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RType.RTypePack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string clientip = 2;
  if (this->clientip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientip());
  }

  // .RType.RTypePack.PackType code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code());
  }

  // uint32 clientId = 3;
  if (this->clientid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_clientid());
  }

  switch (Packet_case()) {
    // .RType.ResponsePacket ResponseContent = 4;
    case kResponseContent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Packet_.responsecontent_);
      break;
    }
    // .RType.LobbyPacket LobbyContent = 5;
    case kLobbyContent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Packet_.lobbycontent_);
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RTypePack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RType.RTypePack)
  GOOGLE_DCHECK_NE(&from, this);
  const RTypePack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RTypePack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RType.RTypePack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RType.RTypePack)
    MergeFrom(*source);
  }
}

void RTypePack::MergeFrom(const RTypePack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RType.RTypePack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clientip().size() > 0) {

    clientip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clientip_);
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.clientid() != 0) {
    _internal_set_clientid(from._internal_clientid());
  }
  switch (from.Packet_case()) {
    case kResponseContent: {
      _internal_mutable_responsecontent()->::RType::ResponsePacket::MergeFrom(from._internal_responsecontent());
      break;
    }
    case kLobbyContent: {
      _internal_mutable_lobbycontent()->::RType::LobbyPacket::MergeFrom(from._internal_lobbycontent());
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
}

void RTypePack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RType.RTypePack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RTypePack::CopyFrom(const RTypePack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RType.RTypePack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTypePack::IsInitialized() const {
  return true;
}

void RTypePack::InternalSwap(RTypePack* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  clientip_.Swap(&other->clientip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
  swap(clientid_, other->clientid_);
  swap(Packet_, other->Packet_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RTypePack::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResponsePacket::InitAsDefaultInstance() {
}
class ResponsePacket::_Internal {
 public:
};

ResponsePacket::ResponsePacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RType.ResponsePacket)
}
ResponsePacket::ResponsePacket(const ResponsePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:RType.ResponsePacket)
}

void ResponsePacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResponsePacket_RTypePack_2eproto.base);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
}

ResponsePacket::~ResponsePacket() {
  // @@protoc_insertion_point(destructor:RType.ResponsePacket)
  SharedDtor();
}

void ResponsePacket::SharedDtor() {
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResponsePacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResponsePacket& ResponsePacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResponsePacket_RTypePack_2eproto.base);
  return *internal_default_instance();
}


void ResponsePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:RType.ResponsePacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _internal_metadata_.Clear();
}

const char* ResponsePacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RType.ResponsePacket.ActionType Code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::RType::ResponsePacket_ActionType>(val));
        } else goto handle_unusual;
        continue;
      // string Content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RType.ResponsePacket.Content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponsePacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RType.ResponsePacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RType.ResponsePacket.ActionType Code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // string Content = 2;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RType.ResponsePacket.Content");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RType.ResponsePacket)
  return target;
}

size_t ResponsePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RType.ResponsePacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Content = 2;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // .RType.ResponsePacket.ActionType Code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponsePacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RType.ResponsePacket)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponsePacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponsePacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RType.ResponsePacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RType.ResponsePacket)
    MergeFrom(*source);
  }
}

void ResponsePacket::MergeFrom(const ResponsePacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RType.ResponsePacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void ResponsePacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RType.ResponsePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponsePacket::CopyFrom(const ResponsePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RType.ResponsePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponsePacket::IsInitialized() const {
  return true;
}

void ResponsePacket::InternalSwap(ResponsePacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponsePacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LobbyPacket::InitAsDefaultInstance() {
}
class LobbyPacket::_Internal {
 public:
};

LobbyPacket::LobbyPacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RType.LobbyPacket)
}
LobbyPacket::LobbyPacket(const LobbyPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  roomid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_roomid().empty()) {
    roomid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.roomid_);
  }
  udp_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_udp_ip().empty()) {
    udp_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.udp_ip_);
  }
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:RType.LobbyPacket)
}

void LobbyPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LobbyPacket_RTypePack_2eproto.base);
  roomid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  udp_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(port_));
}

LobbyPacket::~LobbyPacket() {
  // @@protoc_insertion_point(destructor:RType.LobbyPacket)
  SharedDtor();
}

void LobbyPacket::SharedDtor() {
  roomid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  udp_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LobbyPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LobbyPacket& LobbyPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LobbyPacket_RTypePack_2eproto.base);
  return *internal_default_instance();
}


void LobbyPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:RType.LobbyPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  udp_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(port_));
  _internal_metadata_.Clear();
}

const char* LobbyPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 PlayerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string RoomID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_roomid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RType.LobbyPacket.RoomID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 MaxPlayer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          maxplayer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string udp_ip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_udp_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RType.LobbyPacket.udp_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LobbyPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RType.LobbyPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 PlayerID = 1;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // string RoomID = 2;
  if (this->roomid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roomid().data(), static_cast<int>(this->_internal_roomid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RType.LobbyPacket.RoomID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_roomid(), target);
  }

  // uint32 MaxPlayer = 3;
  if (this->maxplayer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_maxplayer(), target);
  }

  // string udp_ip = 4;
  if (this->udp_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_udp_ip().data(), static_cast<int>(this->_internal_udp_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RType.LobbyPacket.udp_ip");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_udp_ip(), target);
  }

  // uint32 port = 5;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RType.LobbyPacket)
  return target;
}

size_t LobbyPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RType.LobbyPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string RoomID = 2;
  if (this->roomid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roomid());
  }

  // string udp_ip = 4;
  if (this->udp_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_udp_ip());
  }

  // uint32 PlayerID = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerid());
  }

  // uint32 MaxPlayer = 3;
  if (this->maxplayer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxplayer());
  }

  // uint32 port = 5;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LobbyPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RType.LobbyPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const LobbyPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LobbyPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RType.LobbyPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RType.LobbyPacket)
    MergeFrom(*source);
  }
}

void LobbyPacket::MergeFrom(const LobbyPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RType.LobbyPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roomid().size() > 0) {

    roomid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.roomid_);
  }
  if (from.udp_ip().size() > 0) {

    udp_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.udp_ip_);
  }
  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from.maxplayer() != 0) {
    _internal_set_maxplayer(from._internal_maxplayer());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void LobbyPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RType.LobbyPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LobbyPacket::CopyFrom(const LobbyPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RType.LobbyPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LobbyPacket::IsInitialized() const {
  return true;
}

void LobbyPacket::InternalSwap(LobbyPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  roomid_.Swap(&other->roomid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  udp_ip_.Swap(&other->udp_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(playerid_, other->playerid_);
  swap(maxplayer_, other->maxplayer_);
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LobbyPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace RType
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RType::RTypePack* Arena::CreateMaybeMessage< ::RType::RTypePack >(Arena* arena) {
  return Arena::CreateInternal< ::RType::RTypePack >(arena);
}
template<> PROTOBUF_NOINLINE ::RType::ResponsePacket* Arena::CreateMaybeMessage< ::RType::ResponsePacket >(Arena* arena) {
  return Arena::CreateInternal< ::RType::ResponsePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::RType::LobbyPacket* Arena::CreateMaybeMessage< ::RType::LobbyPacket >(Arena* arena) {
  return Arena::CreateInternal< ::RType::LobbyPacket >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
